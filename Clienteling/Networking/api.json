{
  "openapi": "3.0.3",
  "info": {
    "title": "Clienteling APIs",
    "description": "Clienteling APIs.",
    "version": "v1"
  },
  "servers": [
    {
      "x-name": "Development",
      "url": "https://apis.dev.kenzo.clienteling.lvmhda.com",
      "description": "Development server"
    },
    {
      "x-name": "Staging",
      "url": "https://clienteling-uat.kenzo.com",
      "description": "Staging server"
    },
    {
      "x-name": "Production",
      "url": "https://clienteling.kenzo.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "jwt": []
    }
  ],
  "paths": {
    "/appointments/v1/appointments": {
      "get": {
        "summary": "Get appointments for the current logged in user",
        "description": "Get appointments for the current logged in user",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentsResponseV1"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v1"
        ]
      },
      "post": {
        "summary": "Create an appointment for the currently logged in user",
        "description": "Create an appointment for the currently logged in user",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateAppointmentBody"
        },
        "responses": {
          "201": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v1"
        ]
      }
    },
    "/appointments/v1/appointments/unassigned": {
      "get": {
        "summary": "Get unassigned appointments for a given store",
        "description": "Get unassigned appointments for a given store",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppointmentFilterTerritoryOwnerId"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterTerritoryId"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterStartDate"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterEndDate"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnassignedAppointmentsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Unassigned Appointments v1"
        ]
      }
    },
    "/appointments/v1/appointments/unassigned/{appointmentId}": {
      "patch": {
        "summary": "Update an appointment with a CA id or a Store id",
        "description": "Update an appointment with a CA id or a Store id",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppointmentIdPathParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssignAppointmentBody"
        },
        "responses": {
          "201": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successful request"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Unassigned Appointments v1"
        ]
      }
    },
    "/appointments/v2/appointments": {
      "get": {
        "summary": "Get appointments for the current logged in user",
        "description": "Get appointments for the current logged in user",
        "parameters": [
          {
            "name": "advisorId",
            "description": "The advisor ID of the advisor which assigned to the appointment.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "description": "The client ID of the client for whom the appointment is scheduled.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterTerritoryOwnerId"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterTerritoryId"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterStartDate"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterEndDate"
          },
          {
            "$ref": "#/components/parameters/AppointmentFilterType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentsResponseV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v2"
        ]
      }
    },
    "/appointments/v1/appointments/{appointmentId}": {
      "get": {
        "summary": "Get appointment by id",
        "description": "Get appointment by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppointmentIdPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDetail"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v1"
        ]
      },
      "patch": {
        "summary": "Edit an appointment",
        "description": "Edit an appointment",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppointmentIdPathParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EditAppointmentBody"
        },
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v1"
        ]
      },
      "delete": {
        "summary": "Delete an appointment",
        "description": "Delete an appointment",
        "parameters": [
          {
            "$ref": "#/components/parameters/AppointmentIdPathParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Interact with Appointments v1"
        ]
      }
    },
    "/appointments/v1/appointments/topics": {
      "get": {
        "summary": "Get appointment topics",
        "description": "Get appointment topics",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentTopicsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Appointments"
        ]
      }
    },
    "/appointments/v1/appointments/channels": {
      "get": {
        "summary": "Get appointment channels",
        "description": "Get appointment channels",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentChannelsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Appointments"
        ]
      }
    },
    "/appointments/v1/appointments/territories": {
      "get": {
        "summary": "Get appointment territories for the current logged in user",
        "description": "Get appointment territories for the current logged in user",
        "parameters": [
          {
            "name": "topicId",
            "description": "Topic Id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentTerritoriesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Appointments"
        ]
      }
    },
    "/appointments/v1/appointments/territories/timeslots": {
      "get": {
        "summary": "Get appointment channels for the currently logged in user",
        "description": "Get available timeslots for the currently logged in user\n\nThis endpoint takes two optional parameters: `beginPeriod` and `endPeriod`. These two params form a pair, that means if one is specified, you need to specify the other.\nIn case you only provide one of these parameters, you'll receive a 400 bad request asking to provide the other parameter.\n",
        "parameters": [
          {
            "name": "territoryId",
            "description": "The territory ID selected.",
            "in": "query",
            "required": true,
            "example": "0Hh3M0000008wxJSAQ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topicId",
            "description": "The topic ID selected.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beginPeriod",
            "description": "The date from which you wanna book an appointment",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ISO8601DateString"
            }
          },
          {
            "name": "endPeriod",
            "description": "The deadline for booking an appointment",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ISO8601DateString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentTimeSlotsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Appointments"
        ]
      }
    },
    "/client360/v1/clients/{clientId}/header": {
      "get": {
        "operationId": "ClientsController_findHeaderOne",
        "summary": "Get headers information of one client by ID.",
        "description": "Returns Client360 page header section data.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientHeaderJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/client360/v1/clients/{clientId}/kpis": {
      "get": {
        "operationId": "ClientsController_findKpiOne",
        "summary": "Get client's KPIs.",
        "description": "Returns Client360 page KPI section data.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientKPIJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/client360/v1/clients/{clientId}/timeline": {
      "get": {
        "operationId": "ClientsController_findTimelineOneV1",
        "summary": "Get client's timeline V1.",
        "description": "Returns Client360 page timeline section data, such as - interactions, transactions, outreaches",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientTimelineV1JSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/client360/v2/clients/{clientId}/timeline": {
      "get": {
        "operationId": "ClientsController_findTimelineOne",
        "summary": "Get client's timeline V2.",
        "description": "Returns Client360 page timeline section data, such as - interactions, transactions, outreaches",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientTimelineV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/client360/v1/clients/{clientId}/timeline/actions": {
      "get": {
        "operationId": "ClientsController_findTimelineActionsOne",
        "summary": "Get client's timeline actions.",
        "description": "Returns Client360 page timeline actions options.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientTimelineActionsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clientlists/v1/lists/clients/members/{memberId}": {
      "delete": {
        "operationId": "ClientListsMembersController_delete",
        "summary": "Delete client list member by member ID.",
        "description": "Delete client list member by member ID.",
        "parameters": [
          {
            "name": "memberId",
            "description": "The member ID to delete from the client list",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists Members"
        ]
      }
    },
    "/clientlists/v1/lists/clients": {
      "get": {
        "operationId": "ClientListsController_findAll",
        "summary": "Get all client lists.",
        "description": "Get all client lists.",
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientListsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists"
        ]
      },
      "post": {
        "operationId": "ClientListsController_create",
        "summary": "Create a client list.",
        "description": "Create a client list.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientList"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientListSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists"
        ]
      }
    },
    "/clientlists/v1/lists/clients/{listId}": {
      "get": {
        "operationId": "ClientListsController_findOne",
        "summary": "Get a client list by ID.",
        "description": "Get a client list by ID.\n\n**How to use pagination?**\n\nIf the request results size is larger than the provided `pageSize` value, `nextCursor` and  `totalNumberOfPages` will be added to the response object.\n\nAssuming the following request returns more than the requested `(pageSize=200)` amount of results -\n\n> `GET https://domain.com/path?pageSize=200&pageIndex=0`\n> ```\n> RESPONSE\n> {\n>   \"status\": \"success\",\n>   \"data\": {\n>     \"source\": \"Example Plugin\",\n>     \"actionId\": \"00000000\",\n>     \"result\": {\n>       \"clients\": [\n>         { ... }\n>       ],\n>       \"totalNumberOfPages\": 2,\n>       \"next_cursor\": \"01g5E00001Ned2tQAB\"\n>     }\n>   }\n> }\n> ```\nTo paginate further results, the next request should specify the original's query page size, next page index and cursor -\n\n> `GET https://domain.com/path?pageSize=200&pageIndex=1&cursor=01g5E00001Ned2tQAB`\n",
        "parameters": [
          {
            "name": "listId",
            "description": "The list Id to use",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageIndexQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageSizeQueryParam"
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientListJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists"
        ]
      },
      "put": {
        "operationId": "ClientListsController_put",
        "summary": "Update a client list.",
        "description": "Update a client list. `memberIds` property can only *add* member Ids to an existing list, but can not remove them.\n\nIn a scenario where no `memberIds` were provided in request's body, the existing `memberIds` will not change.\nIf `memberIds` were provided in request's body, these memberIds will be added in addition to the existing memberIds list.\n\n`memberIds` and `criteria` are incompatible with each other. Only one of them can exist in a request.\n\n***-criteria*** attribute is currently not being used or have any implementation.\n",
        "parameters": [
          {
            "name": "listId",
            "description": "The list Id to use",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientList"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists"
        ]
      },
      "delete": {
        "operationId": "ClientListsController_delete",
        "summary": "Delete a client list by ID.",
        "description": "Delete a client list by ID.",
        "parameters": [
          {
            "name": "listId",
            "description": "The list Id to use",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Client Lists"
        ]
      }
    },
    "/clients/v1/clients": {
      "get": {
        "operationId": "ClientsController_findAll",
        "summary": "Get all clients.",
        "description": "Get all clients.\n\n**How to use pagination?**\n\nIf the request results size is larger than the provided `pageSize` value, `nextCursor` and  `totalNumberOfPages` will be added to the response object.\n\nAssuming the following request returns more than the requested `(pageSize=200)` amount of results -\n\n> `GET https://domain.com/path?pageSize=200&pageIndex=0`\n> ```\n> RESPONSE\n> {\n>   \"status\": \"success\",\n>   \"data\": {\n>     \"source\": \"Example Plugin\",\n>     \"actionId\": \"00000000\",\n>     \"result\": {\n>       \"clients\": [\n>         { ... }\n>       ],\n>       \"totalNumberOfPages\": 2,\n>       \"next_cursor\": \"01g5E00001Ned2tQAB\"\n>     }\n>   }\n> }\n> ```\nTo paginate further results, the next request should specify the original's query page size, next page index and cursor -\n\n> `GET https://domain.com/path?pageSize=200&pageIndex=1&cursor=01g5E00001Ned2tQAB`\n",
        "parameters": [
          {
            "name": "query",
            "description": "Free text search field. Searches through all of the data related to the clients.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientlistId",
            "description": "Client list ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchScope",
            "description": "Used to determine how to filter clients.",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchScope"
            }
          },
          {
            "$ref": "#/components/parameters/PageIndexQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageSizeQueryParam"
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/v1/clients/{clientId}": {
      "get": {
        "operationId": "ClientsController_findDetailsOne",
        "summary": "Get detailled information of one client by ID.",
        "description": "Get detailled information of one client by ID.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get details of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDetailsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      },
      "patch": {
        "operationId": "ClientsController_patchOne",
        "summary": "update a client by ID.",
        "description": "update a client by ID.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get details of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyJSONJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/v1/clients/{clientId}/notes": {
      "get": {
        "operationId": "ClientsController_findNotesOne",
        "summary": "Get client's notes.",
        "description": "Get client's notes.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get details of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNotesJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      },
      "post": {
        "operationId": "ClientsController_createClient360NotesByClientId",
        "summary": "Create client's note",
        "description": "Create client's note",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to add a note to",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientNoteEdit"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "201 Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyJSONJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/v1/clients/{clientId}/preferences": {
      "get": {
        "operationId": "ClientsController_findPreferencesOne",
        "summary": "Get client's preferences.",
        "description": "Get client's preferences.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get details of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPreferencesJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/v1/notes/{noteId}": {
      "delete": {
        "operationId": "NotesController_delete",
        "summary": "Delete a note by note id.",
        "description": "Delete a note by note id.",
        "parameters": [
          {
            "name": "noteId",
            "description": "The note ID to delete.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyJSONJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Notes"
        ]
      },
      "patch": {
        "operationId": "NotesController_update",
        "summary": "Edit a note by note id.",
        "description": "Edit a note by note id.",
        "parameters": [
          {
            "name": "noteId",
            "description": "The note ID to edit.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientNoteEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyJSONJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Notes"
        ]
      }
    },
    "/clients/v1/dcm/url": {
      "post": {
        "operationId": "UrlController_buildUniqueUrl",
        "summary": "Generate a new unique link for current advisor.",
        "description": "Generate a new unique link for current advisor.",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLinkResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/v1/dcm": {
      "get": {
        "operationId": "UrlController_redirect",
        "summary": "Redirect to the full link from given link id.",
        "description": "Redirect to the full link from given link id.",
        "parameters": [
          {
            "name": "q",
            "description": "Unique link Id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7IUrI4Vn7jSF"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "302 Found",
            "headers": {
              "Location": {
                "description": "URI to redirect to.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/consultation/v1/consultation/video/token": {
      "get": {
        "summary": "Get a device token to interact with the consultation service.",
        "description": "Get a device token to interact with the consultation service (Sightcall).",
        "responses": {
          "200": {
            "description": "A registration token is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationTokenResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "tags": [
          "Video Consultation"
        ]
      },
      "delete": {
        "summary": "Unregister agent's token(s) when the user logs out of the app.",
        "description": "Unregister agent's tokens when the user logs out of the app (Sightcall).",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Video Consultation"
        ]
      }
    },
    "/consultation/v2/consultation/connectLinks/{externalIds}": {
      "get": {
        "summary": "Get one to one consultation links for given ids",
        "description": "Get one to one consultation links for given ids",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectLinkExternalIdsPathParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectLinkByExternalIdResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Connect link"
        ]
      }
    },
    "/consultation/v2/consultation/connectLinks/{externalId}": {
      "put": {
        "summary": "Update link for a one to one consultation.",
        "description": "Update a link for a one to one consultation within Bambuser.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectLinkExternalIdPathParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateConnectLinkBody"
        },
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Connect link"
        ]
      }
    },
    "/consultation/v2/consultation/connectLinks": {
      "post": {
        "summary": "Create a new link for a one to one consultation.",
        "description": "Create a new link for a one to one consultation using Bambuser.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateConnectLinkBody"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Connect link"
        ]
      }
    },
    "/curations/v1/curations": {
      "get": {
        "operationId": "CurationController_findAll",
        "summary": "Get the list of all curations.",
        "description": "Get the list of all curations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "$ref": "#/components/parameters/StoreId"
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Curations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      },
      "post": {
        "operationId": "CurationController_create",
        "summary": "Create a curation.",
        "description": "Create a curation.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrUpdateCurationBody"
        },
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/curations/v1/curations/{curationId}": {
      "get": {
        "operationId": "CurationController_findOne",
        "summary": "Get a curation by Curation or User id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "$ref": "#/components/parameters/StoreId"
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "the currency to return the product prices in",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          },
          {
            "name": "curationId",
            "description": "Curation ID to get curation details",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Curation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      },
      "put": {
        "operationId": "CurationController_UpdateOne",
        "summary": "Update a curation by Curation id.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOrUpdateCurationBody"
        },
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to update curation information",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      },
      "patch": {
        "operationId": "CurationController_Patch",
        "summary": "Update a single field of a curation by its id.",
        "requestBody": {
          "$ref": "#/components/requestBodies/PatchCurationBody"
        },
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to update curation information",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      },
      "delete": {
        "operationId": "CurationController_delete",
        "summary": "Delete a curation by id.",
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to delete curation",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/curations/v1/curations/{curationId}/duplicate": {
      "post": {
        "operationId": "CurationController_Duplicate",
        "summary": "Duplicate an existing curation.",
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to duplicate",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/curations/v1/curations/{curationId}/freeze": {
      "put": {
        "operationId": "CurationController_Freeze",
        "summary": "Mark a curation a read only.",
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to freeze",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/curations/v1/curations/{curationId}/assets": {
      "post": {
        "operationId": "CurationController_UploadAssets",
        "summary": "Upload personal assets for a given curation.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UploadAssetBody"
        },
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to update curation information",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAssetResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/curations/v1/curations/{curationId}/products": {
      "delete": {
        "operationId": "CurationController_emptyCuration",
        "summary": "Empty products list of the given curation.",
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to empty product list",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      },
      "post": {
        "operationId": "CurationController_addProduct",
        "summary": "Add multiple products to a given curation.",
        "tags": [
          "Curations"
        ],
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID to add products on",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddProductsBody"
        },
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/curations/v1/curations/{curationId}/products/{productId}": {
      "delete": {
        "operationId": "CurationController_removeProduct",
        "summary": "Delete a single product in a given curation.",
        "parameters": [
          {
            "name": "curationId",
            "description": "Curation ID in which we remove a product",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "description": "Product ID to remove in the given curation",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Curations"
        ]
      }
    },
    "/dashboards/v1/dashboards/{userId}": {
      "get": {
        "operationId": "DashboardsController_findOneByDashboardId",
        "summary": "Return dashboard information",
        "description": "Get dashboards by User Id, with an optional parameter for running user",
        "parameters": [
          {
            "name": "userId",
            "description": "The dashboard ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runningUser",
            "description": "The running user to get data of",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshDashboard",
            "description": "pram to detrmine if to refresh the dashboard",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDashboardsV2JSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Dashboards"
        ]
      }
    },
    "/dashboards/v1/v1/dashboards/{userId}": {
      "get": {
        "deprecated": true,
        "operationId": "DashboardsController_findAll",
        "summary": "Return dashboard information, by user ID.",
        "description": "Get dashboards by user Id.",
        "parameters": [
          {
            "name": "userId",
            "description": "The user ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/filtersQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Dashboards"
        ]
      }
    },
    "/events/v1/events": {
      "get": {
        "operationId": "EventsController_findAll",
        "summary": "Get the list of all events.",
        "description": "Get the list of all events.\n\nThere are several filters available at the moment.\nThree of them (appointmentTopicId, appointmentChannel, storeId) can be applied only if the eventType is appointment.\nIn case you specify one of these three filters without passing eventType=Appointment as well, an error is thrown.\n\nNote: If you consider sending multiple values for a single filter,\nthe recommend way to that is to separate them using a comma `,`.\n",
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Filter to determine the type of the event",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Appointment",
                "Standard"
              ]
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Filters used to refine the events retrieved.\n\n```\nfilters = {\n  filterKey1 : VALUE1,\n  filterKey2 : VALUEA,VALUEB,VALUEC\n}\n```\n\nThe filterKeys are obtained from the result of the get filters query.\n\nIn case an array of values are provided with a filter,\nthe logical operation that will be apply is `Logical OR`\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": {
                "appointmentType": [
                  "instore",
                  "virtual"
                ],
                "storeId": [
                  "exampleStoreId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Events"
        ]
      }
    },
    "/events/v1/filters": {
      "get": {
        "operationId": "FiltersController_findAll",
        "summary": "Get the list of all available filters.",
        "description": "Return the list of all available filters",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "Filter to determine the filters that we should return.\n\nCurrently there's only one event type that is handled in SF: appointment.\nBecause we don't know when another event type will be added, we prefer to design\nthis endpoint like this so that we won't need to apply any change in the near future.\n\nThere're two options at the moment for this filter: Appointment and Standard.\n`Appointment` will return the filters that can be applied on events of type Appointment\nand `Standard` will return filters that can be applied on all kind of events\n\nThis filter is not required at the moment and will return the filters for the\neventType `Standard`, which is consider as the reference for this endpoint.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Appointment",
                "Standard"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFilters"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Filters"
        ]
      }
    },
    "/notifications/v1/notifications": {
      "get": {
        "operationId": "NotificationsController_findAll",
        "summary": "Get the list of all notifications.",
        "description": "Get the list of all notifications.",
        "parameters": [
          {
            "name": "read",
            "in": "query",
            "description": "Filter to restrict to read/unread notifications",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Filter to restrict to notifications created after given datetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-22T13:52:06.000Z"
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Filter to restrict to notifications created before given datetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-22T13:52:06.000Z"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Notifications"
        ]
      },
      "post": {
        "operationId": "NotificationsController_create",
        "summary": "Create a notification.",
        "description": "Create a notification.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateNotificationBody"
        },
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/v1/notifications/{notificationId}": {
      "patch": {
        "operationId": "NotificationsController_patch",
        "summary": "Update some notification fields.",
        "description": "Update some notification fields.",
        "parameters": [
          {
            "$ref": "#/components/parameters/NotificationId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PatchNotificationBody"
        },
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/v1/subscriptions": {
      "get": {
        "operationId": "SubscriptionController_find",
        "summary": "Get current user subscription.",
        "description": "Get current user subscription.",
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Subscriptions"
        ]
      },
      "patch": {
        "operationId": "SubscriptionController_patch",
        "summary": "Update some fields of current user subscription.",
        "description": "Update some fields of current user subscription. The subscription is created for current user if none exists.",
        "requestBody": {
          "$ref": "#/components/requestBodies/PatchSubscriptionBody"
        },
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/nps/v1/nps": {
      "get": {
        "operationId": "NpsController_findAll",
        "summary": "Get the list of all NPS Feedbacks.",
        "description": "Get the list of all NpsFeedbacks for a given client.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The ID of the client for whom we search for NPS.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NpsFeedbacks"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "NPS"
        ]
      }
    },
    "/nps/v1/nps/{npsId}": {
      "get": {
        "operationId": "NpsController_findOne",
        "summary": "Get one NpsFeedback from its id.",
        "description": "Get one NpsFeedback from its id",
        "parameters": [
          {
            "$ref": "#/components/parameters/NpsId"
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NpsFeedbackDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "NPS"
        ]
      }
    },
    "/orders/v1/orders": {
      "post": {
        "summary": "Create an order",
        "description": "Create an order.",
        "requestBody": {
          "$ref": "#/components/requestBodies/OrderCreationBody"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/OrderCreationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/v1/orders/{orderId}": {
      "get": {
        "summary": "Get an order by id",
        "description": "Get an order by id.",
        "parameters": [
          {
            "name": "orderId",
            "description": "Order ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetOrderByIdResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/v2/orders/{orderId}": {
      "get": {
        "deprecated": true,
        "summary": "Get an order by id",
        "description": "Get an order by id. Deprecation: use `/v2/transactions/{transactionId}` instead.",
        "parameters": [
          {
            "name": "orderId",
            "description": "Order ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetOrderByIdResponseV2"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/v1/payments/links": {
      "post": {
        "summary": "Create a payment link",
        "description": "Create a payment link.",
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentCreationBody",
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PaymentLinkCreationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Pay by link"
        ]
      }
    },
    "/orders/v1/payments/links/{linkId}": {
      "get": {
        "summary": "Get a payment link by id",
        "description": "Get a payment link by id.",
        "parameters": [
          {
            "name": "linkId",
            "description": "Payment link ID",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPaymentLinkResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Pay by link"
        ]
      }
    },
    "/orders/v1/payments/links/callback": {
      "post": {
        "summary": "Process payment service provider payment response",
        "description": "Process the response of the payment service provider (PSP) regarding a payment.\nThe process might include updating an Order Management System (OMS) and notifying clients about the status of the payment.\n```\n",
        "security": [
          {
            "pspbasic": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentNotificationWebhookBody"
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "title": "PaymentNotificationWebhookResponse",
                  "type": "string",
                  "example": "[accepted]"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "title": "PaymentNotificationWebhookErrorResponse",
                  "type": "string",
                  "example": "[error]"
                }
              }
            }
          }
        },
        "tags": [
          "Pay by link"
        ]
      }
    },
    "/outreach/v1/clients/{clientId}/outreach": {
      "get": {
        "operationId": "ClientsController_findOutreachOne",
        "summary": "Get client's outreach channels.",
        "description": "Get client's outreach channels by client ID.",
        "parameters": [
          {
            "name": "clientId",
            "description": "The client ID to get data of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/OutreachChannelsQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientOutreachJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Clients"
        ]
      }
    },
    "/outreach/v1/interactions": {
      "get": {
        "operationId": "InteractionsController_findAllV1",
        "summary": "Get a list of interactions.",
        "description": "Get a list of interactions.",
        "parameters": [
          {
            "name": "clientId",
            "description": "Client ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractionsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Interactions"
        ]
      },
      "post": {
        "operationId": "InteractionsController_createV1",
        "summary": "Create an interaction.",
        "description": "Create an interaction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInteraction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponseJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Interactions"
        ]
      }
    },
    "/outreach/v2/interactions": {
      "get": {
        "operationId": "InteractionsController_findAll",
        "summary": "Get a list of interactions.",
        "description": "Get a list of interactions.",
        "parameters": [
          {
            "name": "clientId",
            "description": "Client ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractionsV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Interactions"
        ]
      },
      "post": {
        "operationId": "InteractionsController_create",
        "summary": "Create an interaction.",
        "description": "Create an interaction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInteractionV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Interactions"
        ]
      }
    },
    "/outreach/v1/newsletters": {
      "get": {
        "operationId": "NewslettersController_findAll",
        "summary": "Get a list of newsletters.",
        "description": "Get a list of newsletters.",
        "parameters": [
          {
            "name": "clientId",
            "description": "Client ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewslettersJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Newsletters"
        ]
      }
    },
    "/outreach/v2/newsletters": {
      "get": {
        "operationId": "NewslettersController_findAll_v2",
        "summary": "Get a list of newsletters.",
        "description": "Get a list of newsletters.",
        "parameters": [
          {
            "name": "clientId",
            "description": "Client ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewslettersV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Newsletters"
        ]
      }
    },
    "/outreach/v1/templates": {
      "get": {
        "operationId": "TemplatesController_findAll",
        "summary": "Get saved templates.",
        "description": "Get saved templates.",
        "parameters": [
          {
            "name": "category",
            "description": "Filter by template category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outreach",
                "productShare",
                "payByLink",
                "virtualConsultation",
                "curator"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutreachTemplatesJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Templates"
        ]
      }
    },
    "/transactions/v1/transactions": {
      "get": {
        "operationId": "TransactionsController_findAll",
        "summary": "Get a list of transactions.",
        "description": "Get a list of transactions.",
        "parameters": [
          {
            "name": "clientId",
            "description": "Client ID to filter the results by.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/v1/transactions/{transactionId}": {
      "get": {
        "operationId": "TransactionsController_findOne",
        "summary": "Get a transaction by id.",
        "parameters": [
          {
            "name": "transactionId",
            "description": "Transcation ID to get details of",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalImages",
            "description": "Determines if the images of the items in the result will be the ones from the response, or should they be fetched from an external site.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionJSendSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/JSendNotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/v2/transactions": {
      "get": {
        "operationId": "TransactionsController_findAllV2",
        "summary": "Get a list of transactions.",
        "description": "Get a list of transactions.",
        "parameters": [
          {
            "name": "transactionIds",
            "description": "Comma separated list of transaction ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentIds",
            "description": "Comma separated list of transaction payment ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/v2/transactions/{transactionId}": {
      "get": {
        "operationId": "TransactionsController_findOneV2",
        "summary": "Get an transaction by id",
        "parameters": [
          {
            "name": "transactionId",
            "description": "Transaction id (= order id)",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": [
          "Transactions"
        ]
      }
    },
    "/users/v1/users/info": {
      "get": {
        "operationId": "UsersController_findCurrent",
        "summary": "Get information about the logged in user.",
        "description": "Get information about the logged in user.",
        "responses": {
          "200": {
            "description": "2XX Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoJSendSuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/v1/users/notifications/registrations": {
      "get": {
        "parameters": [
          {
            "name": "advisorId",
            "in": "query",
            "description": "The ID of the advisor you'd like to receive device tokens for, instead of the connected user.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "GetNotificationsRegistrationsTokens",
        "summary": "Get the device tokens of an advisor.",
        "description": "Get the device tokens of an advisor. By default, returns the device tokens of the connected user. If `advisorId` query parameter is supplied, returns his device tokens.\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetNotificationsRegistrationsTokens"
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "registerToNotifications",
        "summary": "Register device's token to the connected user.",
        "description": "Register device's Firebase token to the connected user.\n* If the token already exists for the requesting user, updates its last_updated field.\n* If the token already exists for a different user, deletes the token from his user and adds it to the requesting user.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterToNotificationsBody"
        },
        "responses": {
          "204": {
            "description": "Successfully added token to the user's list of tokens."
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/v1/users/notifications/registrations/{token}": {
      "delete": {
        "operationId": "unregisterToNotifications",
        "summary": "Unregister a token from the connected user.",
        "description": "Unregister a Firebase token from the connected user.",
        "parameters": [
          {
            "name": "token",
            "description": "Firebase device token",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted token from the user's list of tokens."
          },
          "400": {
            "$ref": "#/components/responses/JSendBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/JSendInternalServerError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/products/v1/products/{productIdsOrUpcs}": {
      "get": {
        "summary": "Get the details of a product, a product master or a bundle",
        "description": "This endpoint allows you to get the full details about a product, a master or a bundle.\n\n## Attributes\n\nAttributes are the values configurable for a product.\n\nFor a master, the attributes are given without specifying their values.\n\nFor a bundle, the attributes are grouped by elements of the bundle.\n\n## Properties\n\nProperties are values not configurable, like descriptions.\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "shopId",
            "in": "query",
            "description": "The ID of the shop from which the call is made. This ID is used to retrieve stock availability for this given shop. If no shop ID will be given, the response won't include availability & pricing details.\n",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "The currency to return the product prices in. If no currency code will be given, the response won't include pricing details.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          },
          {
            "name": "ignoreNotFoundErrors",
            "in": "query",
            "description": "Specify whether you want to still get data in the response if some of the provided product ids are not existing in the product catalog.\n",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "productIdsOrUpcs",
            "in": "path",
            "description": "An array or a single value of a product, master or bundle code or upc.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "An object defining the selected attributes and their corresponding values.\n````\n  attributes= {\n    \"size\": \"12\",\n    \"color\": \"red\"\n  }\n```\nEach key of this object is an attribute of the current master product, which should help to display in the FE, a list of relevant products.\nEach key of this attributes query parameter can only receive one value, not an array. In case more than one value is provided, a BadRequestError will be thrown.\nAnother thing to know is that, you can't populate these attributes with more than one product id. If you do that, a BadRequestError will be thrown.\n",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsDetailsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/v1/products/{masterId}/attributes_values": {
      "get": {
        "deprecated": true,
        "summary": "DEPRECATED - Get possible values for attributes of a product master or a bundle.",
        "description": "**DEPRECATED** This endpoint will be removed in a future release.\n\nThis endpoint can be used to get the possible values of attributes of a product master,\ngiven values for a set of attributes.\n\nWhen the given selection of attributes gives a single product, the product ID is returned.\n\nFor each attribute selected in the request, the list of possible values when this attribute is unselected are given. \n\nFor example, it can be used to get all the possible sizes of products for a given master, with a *blue* color and a *gold* material.\n\n```\nselectedAttributes={\n  ATTRIBUTE1:VALUE1,\n  ATTRIBUTE2:VALUE2\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "shopId",
            "in": "query",
            "description": "the ID of the shop from which the call is made. This ID is used to retrieve stock availability for this given shop.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "masterId",
            "in": "path",
            "required": true,
            "description": "master or bundle id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectedAttributes",
            "in": "query",
            "description": "Values of attributes already selected for this master.\n\nThis parameter is an object and its style is `form` (by default), the data will be serialized before being sent to the backend.\n\nMore on data serialization: https://swagger.io/docs/specification/serialization/\n\nThis example data will be serialized as `color=blue&material=gold`\n",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "color": "blue",
                "material": "gold"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesSearchResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/v1/products": {
      "get": {
        "summary": "Get list of products",
        "description": "This endpoint allows you to get a list of products. Free text search, filter by category and filter by attributes can be combined.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "shopId",
            "in": "query",
            "description": "the ID of the shop from which the call is made. This ID is used to retrieve stock availability for this given shop.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "the currency to return the product prices in",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Free text search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Select products belonging to this category only",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fetchSubcategories",
            "in": "query",
            "description": "Set to true if you want to fetch the products from the subcategories.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "similarTo",
            "in": "query",
            "description": "Used to search products similar to a given product. `similarTo` indicates the `id` of the product for which to search similar products.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "```\nfilters={\n  ATTRIBUTE1 : { \"operator\" : OPERATOR1, \"value\" : VALUE1 },\n  ATTRIBUTE2 : { \"operator\" : OPERATOR2, \"value\" : VALUE2 }\n}\n```\n\n`OPERATOR` can be `eq` or `in`.\n\n`VALUE` can be a single value with `eq` operator or an array of values with `in` operator.\n\nThe `filters` parameter is an object and its style is `form` (by default), the data will be serialized before being sent to the backend.\n\nMore on data serialization: https://swagger.io/docs/specification/serialization/\n\n> This example data will be serialized as:\n\n> ```\n> color[operator]=eq&\n> color[value]=blue&\n> material[operator]=in&\n> material[value]=yellow gold&\n> material[value]=pink gold\n> ```\n\nWhen the operator is \"eq\", any request that includes more than one value is treated as a bad request.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ProductFilterRequestQueryParameter"
            }
          },
          {
            "name": "sortKey",
            "description": "The key identifying which sort option to apply to the results (e.g. name_asc, price_desc, etc.)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "description": "The amount of result to receive in one query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 20
            }
          },
          {
            "name": "pageIndex",
            "description": "The index of the page to query. Counting starts from 0",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsSearchResult"
                },
                "examples": {
                  "example1": {
                    "summary": "Master, product and simple product",
                    "value": {
                      "products": [
                        {
                          "type": "master",
                          "id": "rings",
                          "name": "White gold rings",
                          "image": "http://example.com/rings.jpg",
                          "priceRange": {
                            "min": {
                              "value": 100000,
                              "discountValue": 80000,
                              "currency": "EUR",
                              "divisor": 100
                            },
                            "max": {
                              "value": 150000,
                              "discountValue": 110000,
                              "currency": "EUR",
                              "divisor": 100
                            }
                          },
                          "attributes": [
                            {
                              "displayName": "Color",
                              "displayValues": [
                                "white",
                                "Yellow"
                              ]
                            },
                            {
                              "displayName": "Material",
                              "displayValues": [
                                "White gold",
                                "Yellow gold"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "product",
                          "id": "7B0260-WHG",
                          "masterId": "7B0260",
                          "name": "White gold Necklace",
                          "sku": "7B0260-WHG",
                          "image": "http://example.com/necklace1.jpg",
                          "price": {
                            "value": 120000,
                            "discountValue": 90000,
                            "currency": "EUR",
                            "divisor": 100
                          },
                          "category": {
                            "id": "necklace",
                            "name": "Necklaces"
                          },
                          "attributes": [
                            {
                              "displayName": "Material",
                              "displayValue": "White gold"
                            }
                          ]
                        },
                        {
                          "type": "product",
                          "id": "FG40002U30V",
                          "name": "Eyewear Force 10",
                          "sku": "FG40002U30V",
                          "image": "http://example.com/eyewear1.jpg",
                          "price": {
                            "value": 20000,
                            "discountValue": 5000,
                            "currency": "EUR",
                            "divisor": 100
                          },
                          "category": {
                            "id": "eyewear",
                            "name": "Eyewears"
                          }
                        }
                      ],
                      "filters": {
                        "availableFilters": [
                          {
                            "type": "text",
                            "name": "color",
                            "displayName": "Color",
                            "value": [
                              {
                                "displayName": "White",
                                "value": "white"
                              },
                              {
                                "displayName": "Yellow",
                                "value": "yellow"
                              }
                            ],
                            "isRequired": false,
                            "isMultiSelect": false
                          },
                          {
                            "type": "image",
                            "name": "material",
                            "displayName": "Material",
                            "value": [
                              {
                                "displayName": "White gold",
                                "value": "white gold",
                                "imageURL": "http://example.com/white-gold.png"
                              },
                              {
                                "displayName": "Yellow gold",
                                "value": "yellow gold",
                                "imageURL": "http://example.com/yellow-gold.png"
                              }
                            ],
                            "isRequired": false,
                            "isMultiSelect": false
                          }
                        ],
                        "selectedFilters": [
                          {
                            "name": "color",
                            "operator": "eq",
                            "value": [
                              {
                                "displayName": "White",
                                "value": "white"
                              }
                            ]
                          }
                        ]
                      },
                      "sort": {
                        "availableSorts": [
                          {
                            "key": "name_asc",
                            "display": "Name (asc.)"
                          },
                          {
                            "key": "price_asc",
                            "display": "Price (desc.)"
                          }
                        ],
                        "selectedSortKey": "name_asc"
                      },
                      "pagination": {
                        "actualPageIndex": 0,
                        "totalPageCount": 3,
                        "pageSize": 20,
                        "totalCount": 50
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/v1/categories": {
      "get": {
        "summary": "Get list of sub-categories of a category",
        "description": "This endpoint allows you to get a list of sub-categories of a given category.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "The ID of the category you want to get the sub-categories.\n",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesReduceResult"
                },
                "examples": {
                  "card": {
                    "summary": "With cards",
                    "value": {
                      "categoryId": "collections",
                      "categoryName": "Collections",
                      "items": {
                        "display": "card",
                        "list": [
                          {
                            "categoryId": "force10",
                            "categoryName": "Force 10",
                            "next": "category",
                            "image": "https://example.com/Force10.jpg",
                            "size": "small"
                          },
                          {
                            "categoryId": "chance-infinie",
                            "categoryName": "Chance Infinie",
                            "next": "product",
                            "image": "https://example.com/ChanceInfinie.jpg",
                            "size": "medium"
                          },
                          {
                            "categoryId": "rings",
                            "categoryName": "Rings",
                            "next": "category",
                            "image": "https://example.com/Rings.jpg",
                            "size": "large"
                          }
                        ]
                      }
                    }
                  },
                  "list": {
                    "summary": "With List",
                    "value": {
                      "categoryId": "collections",
                      "categoryName": "Collections",
                      "items": {
                        "display": "text",
                        "list": [
                          {
                            "categoryId": "chance-infinie",
                            "categoryName": "Chance Infinie",
                            "next": "product"
                          },
                          {
                            "categoryId": "rings",
                            "categoryName": "Rings",
                            "next": "category"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Products"
        ]
      }
    },
    "/products/v1/stocks/{productId}": {
      "get": {
        "summary": "Get the stock details for a product",
        "description": "This endpoint allows you to get the full details about stocks for a product.\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "product code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shopId",
            "in": "query",
            "description": "the ID of the shop from which the call is made. This ID is used to retrieve stocks for this given shop.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStockResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Products"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "pspbasic": {
        "type": "http",
        "scheme": "basic"
      },
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Advisor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Advisor's id.",
            "example": "80145066601rfPTAAY"
          },
          "name": {
            "type": "string",
            "description": "Advisor's full name.",
            "example": "Jack Smith"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Client": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Client's id.",
            "example": "80145000001rfPTAAY"
          },
          "name": {
            "type": "string",
            "description": "Client's full name.",
            "example": "John Doe"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "postalCode": {
            "type": "string",
            "description": "Zip/Postal Code"
          },
          "state": {
            "type": "string",
            "description": "State/Province"
          },
          "country": {
            "type": "string",
            "description": "Country"
          }
        }
      },
      "Store": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "023"
          },
          "name": {
            "type": "string",
            "example": "FRED PRINTEMPS HAUSSMANN"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "Price": {
        "type": "object",
        "properties": {
          "value": {
            "format": "int64",
            "type": "integer",
            "example": 99990
          },
          "discountValue": {
            "format": "int64",
            "type": "integer",
            "example": 79990
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "divisor": {
            "type": "integer",
            "example": 100
          }
        },
        "required": [
          "value",
          "currency",
          "divisor"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "10"
          },
          "name": {
            "type": "string",
            "example": "Bracelets"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ProductAvailabilityTag": {
        "type": "object",
        "description": "A value representing a small set of information about the availability of a product\nincluding a title for display and a hex value to use as an accent color.\n",
        "properties": {
          "title": {
            "type": "string",
            "example": "Available"
          },
          "colorHexValue": {
            "type": "string",
            "example": "#12ab21",
            "pattern": "^#[0-9a-fA-F]{6}$"
          }
        },
        "required": [
          "title",
          "colorHexValue"
        ]
      },
      "CurrencyCode": {
        "example": "EUR",
        "type": "string",
        "description": "A currency code in ISO-4217. 3 letters, uppercase.",
        "pattern": "^[A-Z]{3}$"
      },
      "DefaultSuccessResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61926f8b26e979a7a6e2c5d8"
          }
        },
        "required": [
          "id"
        ]
      },
      "ISO8601DateTimeString": {
        "type": "string",
        "format": "date-time",
        "description": "Format: ISO 8601 (http://www.w3.org/TR/NOTE-datetime); YYYY-MM-DDThh:mm:ss.SSSZ",
        "example": "2020-07-23T07:11:26.000+00:00Z"
      },
      "ISO8601DateString": {
        "type": "string",
        "format": "date",
        "description": "Format: ISO 8601 (http://www.w3.org/TR/NOTE-date); YYYY-MM-DD",
        "example": "2020-07-23"
      },
      "PluginResponse": {
        "properties": {
          "actionId": {
            "example": "00000000",
            "type": "string"
          },
          "result": {
            "type": "object"
          },
          "source": {
            "example": "Example Plugin",
            "type": "string"
          }
        },
        "required": [
          "source",
          "actionId",
          "result"
        ],
        "type": "object"
      },
      "PluginErrorResponse": {
        "type": "object",
        "properties": {
          "err": {
            "type": "string",
            "example": "Bad Request"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "err",
          "data"
        ]
      },
      "JSendError": {
        "properties": {
          "code": {
            "example": 500,
            "type": "number"
          },
          "data": {
            "type": "object"
          },
          "message": {
            "example": "Internal Server Error",
            "type": "string"
          },
          "status": {
            "example": "error",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "code",
          "data"
        ],
        "type": "object"
      },
      "JSendFail": {
        "properties": {
          "code": {
            "example": 400,
            "type": "number"
          },
          "data": {
            "type": "object"
          },
          "message": {
            "example": "Bad request",
            "type": "string"
          },
          "status": {
            "example": "fail",
            "type": "string"
          }
        },
        "required": [
          "status",
          "message",
          "code",
          "data"
        ],
        "type": "object"
      },
      "JSendSuccess": {
        "properties": {
          "data": {
            "type": "object"
          },
          "status": {
            "example": "success",
            "type": "string"
          }
        },
        "required": [
          "status",
          "data"
        ],
        "type": "object"
      },
      "MediaAsset": {
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "contentType"
        ]
      },
      "AppointmentTerritory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Territory id",
            "example": "0Hh3M0000008wxJSAQ"
          },
          "name": {
            "type": "string",
            "description": "Territory name",
            "example": "FRED PRINTEMPS HAUSSMANN"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ChannelKey": {
        "type": "string",
        "description": "Identifier key of the channel",
        "enum": [
          "Call",
          "Video",
          "People"
        ]
      },
      "AppointmentConsultation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Consultation id"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the consultation"
          },
          "activeTime": {
            "description": "Indicates at what time the users can connect to the consultation link",
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          }
        },
        "required": [
          "id",
          "url",
          "activeTime"
        ]
      },
      "AppointmentV1": {
        "type": "object",
        "properties": {
          "advisorId": {
            "type": "string",
            "description": "Advisor id"
          },
          "appointmentNumber": {
            "type": "string",
            "description": "Appointment number"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "clientId": {
            "type": "string",
            "description": "Client id"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the appointment"
          },
          "consultation": {
            "$ref": "#/components/schemas/AppointmentConsultation"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "id": {
            "type": "string",
            "description": "Id of the group"
          },
          "status": {
            "type": "string",
            "enum": [
              "Scheduled",
              "In Progress",
              "Completed",
              "Canceled"
            ]
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "territoryId": {
            "type": "string",
            "description": "Territory id"
          },
          "topic": {
            "$ref": "#/components/schemas/TopicGroup"
          }
        },
        "required": [
          "appointmentNumber",
          "channel",
          "clientId",
          "endTime",
          "id",
          "status",
          "startTime",
          "topic"
        ]
      },
      "AppointmentV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Appointment id"
          },
          "advisor": {
            "$ref": "#/components/schemas/Advisor"
          },
          "territory": {
            "$ref": "#/components/schemas/AppointmentTerritory"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "type": {
            "type": "string",
            "description": "Appointment type"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the appointment"
          },
          "topic": {
            "$ref": "#/components/schemas/TopicGroup"
          }
        },
        "required": [
          "id",
          "advisor",
          "territory",
          "client",
          "startTime",
          "endTime",
          "channel",
          "type",
          "topic"
        ]
      },
      "AppointmentDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Appointment id"
          },
          "advisor": {
            "$ref": "#/components/schemas/Advisor"
          },
          "territory": {
            "$ref": "#/components/schemas/AppointmentTerritory"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the appointment"
          },
          "topic": {
            "$ref": "#/components/schemas/TopicGroup"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "consultation": {
            "$ref": "#/components/schemas/AppointmentConsultation"
          },
          "isEditable": {
            "type": "boolean",
            "description": "Whether the user is allowed do edit the appointment or not",
            "example": true
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Whether the appointment has been cancelled",
            "example": false
          }
        },
        "required": [
          "id",
          "advisor",
          "client",
          "territory",
          "startTime",
          "endTime",
          "topic",
          "channel",
          "isEditable",
          "isCancelled"
        ]
      },
      "UnassignedAppointment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Appointment id"
          },
          "territory": {
            "$ref": "#/components/schemas/AppointmentTerritory"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "topic": {
            "$ref": "#/components/schemas/TopicGroup"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "consultation": {
            "$ref": "#/components/schemas/AppointmentConsultation"
          }
        },
        "required": [
          "id",
          "territory",
          "client",
          "startTime",
          "endTime",
          "topic",
          "channel"
        ]
      },
      "TopicGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the group"
          },
          "title": {
            "type": "string",
            "description": "Title of the group"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "Channel": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label to display",
            "example": "Phone Call"
          },
          "key": {
            "$ref": "#/components/schemas/ChannelKey"
          }
        },
        "required": [
          "label",
          "key"
        ]
      },
      "Territory": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "City of the territory"
          },
          "country": {
            "type": "string",
            "description": "Country of the territory"
          },
          "id": {
            "type": "string",
            "description": "Id of the territory"
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "description": "Latitude coordinates of the territory"
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "description": "Longitude coordinates of the territory"
          },
          "name": {
            "type": "string",
            "description": "Name of the territory"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the territory"
          },
          "state": {
            "type": "string",
            "description": "State code of the territory"
          },
          "street": {
            "type": "string",
            "description": "Street address of the territory"
          }
        },
        "required": [
          "city",
          "country",
          "id",
          "latitude",
          "longitude",
          "name",
          "postalCode",
          "street"
        ]
      },
      "TimeSlot": {
        "type": "object",
        "properties": {
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          }
        },
        "required": [
          "endTime",
          "startTime"
        ]
      },
      "GetAppointmentsResponseV1": {
        "type": "object",
        "properties": {
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentV1"
            }
          }
        },
        "required": [
          "appointments"
        ]
      },
      "GetAppointmentsResponseV2": {
        "type": "object",
        "properties": {
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentV2"
            }
          }
        },
        "required": [
          "appointments"
        ]
      },
      "GetUnassignedAppointmentsResponse": {
        "type": "object",
        "properties": {
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnassignedAppointment"
            }
          }
        },
        "required": [
          "appointments"
        ]
      },
      "AppointmentBody": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/ChannelKey"
          },
          "clientId": {
            "type": "string",
            "description": "Client id"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the appointment"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "topicId": {
            "type": "string",
            "description": "Topic id"
          }
        }
      },
      "CreateAppointmentBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppointmentBody"
          },
          {
            "type": "object",
            "properties": {
              "territoryId": {
                "type": "string",
                "description": "Territory id"
              }
            },
            "required": [
              "channel",
              "clientId",
              "endTime",
              "startTime",
              "territoryId",
              "topicId"
            ]
          }
        ]
      },
      "EditAppointmentBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppointmentBody"
          },
          {
            "type": "object",
            "minProperties": 1
          }
        ]
      },
      "AssignAppointmentBody": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 1,
        "properties": {
          "advisorId": {
            "type": "string",
            "description": "The advisor id to which the appointment should be assigned"
          },
          "territoryId": {
            "type": "string",
            "description": "The territory id in which the appointment should take place"
          }
        }
      },
      "GetAppointmentTopicsResponse": {
        "type": "object",
        "properties": {
          "topics": {
            "type": "array",
            "description": "An array of topics which includes topics of the same subject",
            "items": {
              "$ref": "#/components/schemas/TopicGroup"
            }
          }
        },
        "required": [
          "topics"
        ]
      },
      "GetAppointmentChannelsResponse": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "description": "An array of available channels (communication means) for creating an appointment",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "GetAppointmentTerritoriesResponse": {
        "type": "object",
        "properties": {
          "territories": {
            "type": "array",
            "description": "An array of requested territories details",
            "items": {
              "$ref": "#/components/schemas/Territory"
            }
          }
        },
        "required": [
          "territories"
        ]
      },
      "GetAppointmentTimeSlotsResponse": {
        "type": "object",
        "properties": {
          "timeslots": {
            "type": "array",
            "description": "An array of requested timeslot entries",
            "items": {
              "$ref": "#/components/schemas/TimeSlot"
            }
          }
        },
        "required": [
          "timeslots"
        ]
      },
      "PicklistOptionsItem": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "example": "0"
          },
          "label": {
            "type": "string",
            "example": "Art"
          }
        },
        "required": [
          "value",
          "label"
        ]
      },
      "TypedValueText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "example": "value"
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueMultiText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "value"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "multiText"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "example": 0
              },
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueBoolean": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "example": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "boolean"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date",
                "example": "2020-07-23"
              },
              "type": {
                "type": "string",
                "enum": [
                  "date"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueDatetime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-07-23T07:11:26+00:00"
              },
              "type": {
                "type": "string",
                "enum": [
                  "datetime"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueCurrency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "format": "int64",
                "type": "integer",
                "example": 99990
              },
              "currencyCode": {
                "type": "string",
                "example": "USD"
              },
              "currencyDivisor": {
                "type": "number",
                "example": 1000
              },
              "type": {
                "type": "string",
                "enum": [
                  "currency"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueMultiPicklist": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "example": "value"
              },
              "picklistOptions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PicklistOptionsItem"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "multiPicklist"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValuePicklist": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TypedValueBasicProperties"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "example": "value"
              },
              "picklistOptions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PicklistOptionsItem"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "picklist"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TypedValueBasicProperties": {
        "type": "object",
        "properties": {
          "apiName": {
            "type": "string",
            "example": "lastPurchaseDate"
          },
          "translationKey": {
            "type": "string",
            "example": "header.lastPurchaseDate"
          },
          "copyable": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "apiName"
        ]
      },
      "TypedValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TypedValueText"
          },
          {
            "$ref": "#/components/schemas/TypedValueMultiText"
          },
          {
            "$ref": "#/components/schemas/TypedValueNumber"
          },
          {
            "$ref": "#/components/schemas/TypedValueBoolean"
          },
          {
            "$ref": "#/components/schemas/TypedValueDate"
          },
          {
            "$ref": "#/components/schemas/TypedValueDatetime"
          },
          {
            "$ref": "#/components/schemas/TypedValueCurrency"
          },
          {
            "$ref": "#/components/schemas/TypedValueMultiPicklist"
          },
          {
            "$ref": "#/components/schemas/TypedValuePicklist"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/TypedValueText",
            "multiText": "#/components/schemas/TypedValueMultiText",
            "number": "#/components/schemas/TypedValueNumber",
            "boolean": "#/components/schemas/TypedValueBoolean",
            "datetime": "#/components/schemas/TypedValueDatetime",
            "date": "#/components/schemas/TypedValueDate",
            "currency": "#/components/schemas/TypedValueCurrency",
            "multiPicklist": "#/components/schemas/TypedValueMultiPicklist",
            "picklist": "#/components/schemas/TypedValuePicklist"
          }
        }
      },
      "ClientLabel": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "primary",
              "secondary",
              "tertiary"
            ],
            "type": "string",
            "example": "primary"
          },
          "value": {
            "type": "string",
            "example": "VIP"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ClientHeader": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "aZx0c1a6857dac"
          },
          "clientName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "clientLocalLastName": {
            "type": "string",
            "description": "In some localities (like Japan), client can have a local last name",
            "example": "我的名字叫"
          },
          "clientLocalFirstName": {
            "type": "string",
            "description": "In some localities (like Japan), client can have a local first name",
            "example": "自分の名前"
          },
          "advisorId": {
            "type": "string",
            "example": "aZx0edda54771z"
          },
          "clientNumber": {
            "type": "string",
            "example": "123456"
          },
          "storeId": {
            "type": "string",
            "example": "aXfa08779vcx8"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientLabel"
            }
          },
          "basicInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        },
        "required": [
          "clientId",
          "clientName"
        ]
      },
      "ClientKPI": {
        "type": "object",
        "properties": {
          "kpis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPIItem"
            }
          }
        },
        "required": [
          "kpis"
        ]
      },
      "KPIItem": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TypedValue"
          },
          {
            "$ref": "#/components/schemas/NPSScoreKPI"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "npsScore": "#/components/schemas/NPSScoreKPI",
            "text": "#/components/schemas/TypedValue",
            "multiText": "#/components/schemas/TypedValue",
            "number": "#/components/schemas/TypedValue",
            "boolean": "#/components/schemas/TypedValue",
            "datetime": "#/components/schemas/TypedValue",
            "date": "#/components/schemas/TypedValue",
            "currency": "#/components/schemas/TypedValue",
            "multiPicklist": "#/components/schemas/TypedValue",
            "picklist": "#/components/schemas/TypedValue"
          }
        }
      },
      "NPSScoreKPI": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "npsScore"
            ],
            "default": "npsScore"
          },
          "value": {
            "$ref": "#/components/schemas/NpsFeedbackAnswerScore"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ClientTimelineV1": {
        "type": "object",
        "properties": {
          "timeline": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransactionV1"
                },
                {
                  "$ref": "#/components/schemas/InteractionV1"
                },
                {
                  "$ref": "#/components/schemas/NewsletterV1"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "Transactions": "#/components/schemas/TransactionV1",
                  "Interactions": "#/components/schemas/InteractionV1",
                  "Newsletters": "#/components/schemas/NewsletterV1"
                }
              }
            }
          }
        },
        "required": [
          "timeline"
        ]
      },
      "ClientTimelineV2": {
        "type": "object",
        "properties": {
          "timeline": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimelineTransactionEntry"
                },
                {
                  "$ref": "#/components/schemas/TimelineInteractionEntry"
                },
                {
                  "$ref": "#/components/schemas/TimelineNewsletterEntry"
                },
                {
                  "$ref": "#/components/schemas/TimelineAppointmentEntry"
                },
                {
                  "$ref": "#/components/schemas/TimelineNpsEntry"
                },
                {
                  "$ref": "#/components/schemas/TimelineCaseEntry"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "transaction": "#/components/schemas/TimelineTransactionEntry",
                  "refund": "#/components/schemas/TimelineTransactionEntry",
                  "interaction": "#/components/schemas/TimelineInteractionEntry",
                  "newsletter": "#/components/schemas/TimelineNewsletterEntry",
                  "appointment": "#/components/schemas/TimelineAppointmentEntry",
                  "nps": "#/components/schemas/TimelineNpsEntry",
                  "case": "#/components/schemas/TimelineCaseEntry"
                }
              }
            }
          }
        },
        "required": [
          "timeline"
        ]
      },
      "TimelineInteractionEntry": {
        "allOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "interaction"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/InteractionV2"
          }
        ]
      },
      "TimelineTransactionEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionWithoutPrice"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "transaction",
                  "refund"
                ]
              },
              "price": {
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "type",
              "price"
            ]
          }
        ]
      },
      "TransactionV1": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "Transaction"
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/Transaction"
          }
        ]
      },
      "TimelineAppointmentEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the appointment. Use this to get the appointment details."
          },
          "type": {
            "type": "string",
            "enum": [
              "appointment"
            ]
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelKey"
          },
          "territory": {
            "$ref": "#/components/schemas/AppointmentTerritory"
          },
          "advisor": {
            "$ref": "#/components/schemas/Advisor"
          }
        },
        "required": [
          "id",
          "type",
          "startTime",
          "endTime",
          "channel",
          "territory",
          "advisor"
        ]
      },
      "TimelineNpsEntry": {
        "allOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "nps"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/NpsFeedback"
          }
        ]
      },
      "TimelineNewsletterEntry": {
        "allOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "newsletter"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/NewsletterV2"
          }
        ]
      },
      "ClientTimelineActionsContent": {
        "type": "object",
        "properties": {
          "translationKey": {
            "type": "string",
            "example": "timeline.actions.visit"
          },
          "type": {
            "enum": [
              "visit",
              "booking",
              "preOrder",
              "alterationsTailoring",
              "afterSales",
              "gift",
              "instorePickup",
              "delivery"
            ],
            "type": "string",
            "example": "visit"
          }
        },
        "required": [
          "translationKey",
          "type"
        ]
      },
      "ClientTimelineActions": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientTimelineActionsContent"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "TimelineCaseEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the case.",
            "example": "0053M000001OY7VQAW"
          },
          "type": {
            "type": "string",
            "enum": [
              "case"
            ]
          },
          "datetime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "detailsFields": {
            "type": "array",
            "description": "Additional fields to display.",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          },
          "status": {
            "type": "string",
            "description": "Current status for the case."
          },
          "owner": {
            "$ref": "#/components/schemas/Advisor"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          }
        },
        "required": [
          "id",
          "type",
          "datetime",
          "status",
          "owner"
        ]
      },
      "NpsFeedbacks": {
        "type": "object",
        "properties": {
          "nps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NpsFeedback"
            }
          }
        },
        "required": [
          "nps"
        ]
      },
      "NpsFeedback": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "00U3M000001phBFUAL"
          },
          "name": {
            "type": "string",
            "description": "The name associated to the feedback",
            "example": "8/10 - Did you enjoy this swagger?"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "datetime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "eventSource": {
            "$ref": "#/components/schemas/NpsEventSource"
          },
          "score": {
            "$ref": "#/components/schemas/NpsFeedbackAnswerScore"
          }
        },
        "required": [
          "id",
          "name",
          "datetime",
          "eventSource",
          "score"
        ]
      },
      "NpsEventSource": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SourceEventInstore"
          },
          {
            "$ref": "#/components/schemas/SourceEventEcomm"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "inStore": "#/components/schemas/SourceEventInstore",
            "postPayment": "#/components/schemas/SourceEventEcomm",
            "postDelivery": "#/components/schemas/SourceEventEcomm"
          }
        }
      },
      "NpsFeedbackDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "00U3M000001phBFUAL"
          },
          "name": {
            "type": "string",
            "description": "The name associated to the feedback",
            "example": "8/10 - Did you enjoy this swagger?"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "datetime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "comment": {
            "type": "string",
            "description": "The comment left by the client when submitting the survey",
            "example": "This experience was really impressive"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NpsFeedbackAnswer"
            }
          },
          "eventSource": {
            "$ref": "#/components/schemas/NpsEventSource"
          },
          "order": {
            "$ref": "#/components/schemas/TransactionV2"
          },
          "score": {
            "$ref": "#/components/schemas/NpsFeedbackAnswerScore"
          }
        },
        "required": [
          "id",
          "name",
          "datetime",
          "answers",
          "eventSource",
          "score"
        ]
      },
      "NpsFeedbackAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the DUE Feedback Answer",
            "example": "a0U3M000001qJ7cYYY"
          },
          "question": {
            "type": "string",
            "description": "The question related to the current DUE Feedback answer",
            "example": "Did you enjoy this swagger?"
          },
          "score": {
            "$ref": "#/components/schemas/NpsFeedbackAnswerScore"
          }
        },
        "required": [
          "id",
          "question",
          "score"
        ]
      },
      "NpsFeedbackAnswerScore": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "description": "The score related to the current DUE Feedback answer",
            "example": 8
          },
          "maximumValue": {
            "type": "integer",
            "description": "The maximum value for an answer",
            "example": 10
          },
          "color": {
            "type": "string",
            "description": "The colour that should be used in display in FE app",
            "enum": [
              "red",
              "amber",
              "lightGreen",
              "darkGreen"
            ],
            "example": "lightGreen"
          }
        },
        "required": [
          "score",
          "maximumValue",
          "color"
        ]
      },
      "SourceEventInstore": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Where the transaction took place",
            "enum": [
              "inStore"
            ]
          },
          "advisor": {
            "$ref": "#/components/schemas/Advisor"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          }
        },
        "required": [
          "type",
          "advisor",
          "store"
        ]
      },
      "SourceEventEcomm": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Where the transaction took place",
            "enum": [
              "postPayment",
              "postDelivery"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the e-commerce website",
            "example": "Maison’s website"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "OutreachChannels": {
        "type": "string",
        "enum": [
          "text",
          "voice",
          "physical"
        ],
        "example": "text"
      },
      "ClientOutreachChannel": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Call",
              "SMS",
              "Email",
              "WhatsApp",
              "WeChat",
              "Line",
              "Kakao"
            ],
            "type": "string",
            "example": "Email"
          },
          "isPreferred": {
            "type": "boolean",
            "example": false
          },
          "supportedTemplateTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "html",
                "text"
              ]
            },
            "example": [
              "html"
            ]
          },
          "recipients": {
            "example": [
              "foo@example.com",
              "bar@example.com"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "isPreferred",
          "supportedTemplateTypes"
        ]
      },
      "ClientOutreach": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientOutreachChannel"
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "InteractionV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX7652csa4132"
          },
          "title": {
            "type": "string",
            "example": "WhatsApp Message"
          },
          "subtitle": {
            "type": "string",
            "example": "Chance Infinie"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26+00:00"
          },
          "channel": {
            "$ref": "#/components/schemas/InteractionChannel"
          },
          "context": {
            "$ref": "#/components/schemas/InteractionContext"
          },
          "type": {
            "type": "string",
            "example": "Interaction"
          },
          "advisorName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "clientName": {
            "type": "string",
            "example": "Bar Baz"
          },
          "metadata": {
            "$ref": "#/components/schemas/InteractionMetadata"
          }
        },
        "required": [
          "id",
          "title",
          "datetime",
          "advisorName",
          "context"
        ]
      },
      "InteractionV2Metadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/InteractionProductShareMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionPayByLinkMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionProductCuratorMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionVirtualConsultationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionOutreachMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionPostalMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionOutreachActionMetadata"
          }
        ],
        "discriminator": {
          "propertyName": "context",
          "mapping": {
            "paymentLink": "#/components/schemas/InteractionPayByLinkMetadata",
            "productShare": "#/components/schemas/InteractionProductShareMetadata",
            "outreachTemplate": "#/components/schemas/InteractionOutreachMetadata",
            "virtualConsultation": "#/components/schemas/InteractionVirtualConsultationMetadata",
            "productCurator": "#/components/schemas/InteractionProductCuratorMetadata",
            "postal": "#/components/schemas/InteractionPostalMetadata",
            "outreachAction": "#/components/schemas/InteractionOutreachActionMetadata"
          }
        }
      },
      "InteractionV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX7652csa4132"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "channel": {
            "$ref": "#/components/schemas/InteractionChannel"
          },
          "advisorName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "storeName": {
            "type": "string",
            "example": "Foo store",
            "deprecated": true
          },
          "advisorStore": {
            "$ref": "#/components/schemas/Store"
          },
          "metadata": {
            "$ref": "#/components/schemas/InteractionV2Metadata"
          }
        },
        "required": [
          "id",
          "datetime",
          "channel",
          "advisorName",
          "advisorStore",
          "metadata"
        ]
      },
      "InteractionsV1": {
        "type": "object",
        "properties": {
          "interactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionV1"
            }
          }
        },
        "required": [
          "interactions"
        ]
      },
      "InteractionsV2": {
        "type": "object",
        "properties": {
          "interactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionV2"
            }
          }
        },
        "required": [
          "interactions"
        ]
      },
      "InteractionChannel": {
        "type": "string",
        "enum": [
          "SMS",
          "Email",
          "WhatsApp",
          "WeChat",
          "Line",
          "Kakao",
          "Phone",
          "Action"
        ],
        "example": "WhatsApp"
      },
      "InteractionContext": {
        "type": "string",
        "enum": [
          "paymentLink",
          "productShare",
          "outreachTemplate",
          "productCurator",
          "virtualConsultation",
          "postal"
        ],
        "example": "productShare"
      },
      "InteractionMetadata": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "BR031S-A50"
          },
          "productName": {
            "type": "string",
            "example": "Leather bag"
          }
        }
      },
      "InteractionOutreachMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "outreachTemplate"
            ]
          },
          "templateName": {
            "type": "string"
          }
        },
        "required": [
          "context"
        ]
      },
      "InteractionProductShareMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "productShare"
            ]
          },
          "product": {
            "$ref": "#/components/schemas/InteractionMetadataProduct"
          }
        },
        "required": [
          "context",
          "product"
        ]
      },
      "InteractionProductCuratorMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "productCurator"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionMetadataProduct"
            }
          }
        },
        "required": [
          "context",
          "products"
        ]
      },
      "InteractionPayByLinkMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "paymentLink"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionMetadataProduct"
            }
          },
          "pblContext": {
            "$ref": "#/components/schemas/InteractionMetadataPblContext"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "orderStatus": {
            "$ref": "#/components/schemas/TransactionStatus"
          }
        },
        "required": [
          "context",
          "products",
          "pblContext",
          "price",
          "paymentStatus",
          "orderStatus"
        ]
      },
      "InteractionProductCuratorCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "productCurator"
            ]
          },
          "curationId": {
            "type": "string",
            "example": "622760eb37b92b503b1815c0"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the products in the curation"
            },
            "deprecated": true
          }
        },
        "required": [
          "context",
          "productIds"
        ]
      },
      "InteractionVirtualConsultationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "virtualConsultation"
            ]
          },
          "consultationType": {
            "type": "string",
            "enum": [
              "instore",
              "virtual"
            ]
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T14:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T15:30:00.000Z"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "templateName": {
            "type": "string"
          },
          "clientLink": {
            "type": "string",
            "format": "uri",
            "description": "URL of the consultation for client"
          }
        },
        "required": [
          "context",
          "consultationType",
          "startTime",
          "endTime"
        ]
      },
      "InteractionMetadataProduct": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "BR031S-A50"
          },
          "productName": {
            "type": "string",
            "example": "Force 10 bracelet"
          },
          "productImageURLs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "deprecated": true
          },
          "productAssetURLs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaAsset"
            }
          }
        },
        "required": [
          "productId",
          "productName",
          "productImageURLs",
          "productAssetURLs"
        ]
      },
      "InteractionMetadataPblContext": {
        "type": "object",
        "properties": {
          "pblTransactionID": {
            "type": "string",
            "example": "8013M000000GKZKQA4"
          }
        },
        "required": [
          "pblTransactionID"
        ]
      },
      "InteractionPostalMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "postal"
            ]
          },
          "actionType": {
            "type": "string",
            "description": "Translation key of the action"
          },
          "note": {
            "type": "string",
            "description": "A custom note left by the CA to explain this postal interaction",
            "example": "Sent them a bottle of champagne for their birthday"
          }
        },
        "required": [
          "context"
        ]
      },
      "InteractionOutreachActionMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "outreachAction"
            ]
          },
          "action": {
            "type": "string",
            "enum": [
              "visit",
              "alterationsTailoring",
              "preOrder",
              "booking",
              "gift",
              "afterSales",
              "instorePickup",
              "delivery"
            ]
          },
          "subject": {
            "type": "string"
          },
          "actionTitle": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "action",
          "actionTitle"
        ]
      },
      "NewsletterV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX7652csa4132"
          },
          "clientId": {
            "type": "string",
            "example": "aX7652csaaB32"
          },
          "clientName": {
            "type": "string",
            "example": "Bar Baz"
          },
          "type": {
            "type": "string",
            "example": "Newsletter"
          },
          "title": {
            "type": "string",
            "example": "Newsletter"
          },
          "subtitle": {
            "type": "string",
            "example": "WhatsApp Message"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26+00:00"
          },
          "status": {
            "type": "string",
            "example": "Opened"
          }
        },
        "required": [
          "id",
          "clientId",
          "title",
          "subtitle",
          "datetime",
          "status"
        ]
      },
      "NewsletterV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for this newsletter in case more details are required",
            "example": "aX7652csa4132"
          },
          "subject": {
            "type": "string",
            "example": "The subject of the newsletter"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "status": {
            "type": "string",
            "example": "Opened"
          }
        },
        "required": [
          "id",
          "subject",
          "datetime",
          "status"
        ]
      },
      "NewslettersV1": {
        "type": "object",
        "properties": {
          "newsletters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsletterV1"
            }
          }
        },
        "required": [
          "newsletters"
        ]
      },
      "NewslettersV2": {
        "type": "object",
        "properties": {
          "newsletters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsletterV2"
            }
          }
        },
        "required": [
          "newsletters"
        ]
      },
      "TemplateLanguages": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "en"
          },
          "displayName": {
            "type": "string",
            "example": "English"
          }
        },
        "required": [
          "code",
          "displayName"
        ]
      },
      "OutreachTemplatesContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8024Y001100ASDaQAO"
          },
          "name": {
            "type": "string",
            "example": "Happy Birthday"
          },
          "content": {
            "type": "string",
            "example": "<b>Dear customer, we wish you a happy birthday!<b>"
          },
          "preview": {
            "type": "string",
            "example": "Dear customer, we wish you a happy birthday!"
          },
          "languageCode": {
            "type": "string",
            "example": "en"
          },
          "subject": {
            "type": "string",
            "example": "Happy Birthday from LVMH!"
          },
          "type": {
            "enum": [
              "html",
              "text"
            ],
            "type": "string",
            "example": "html"
          }
        },
        "required": [
          "id",
          "name",
          "content",
          "languageCode",
          "subject",
          "type"
        ]
      },
      "OutreachTemplates": {
        "type": "object",
        "properties": {
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateLanguages"
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutreachTemplatesContent"
            }
          }
        },
        "required": [
          "languages",
          "templates"
        ]
      },
      "TransactionItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aY54zwg15xcA"
          },
          "name": {
            "type": "string",
            "example": "Chance infinite ring by Annelise"
          },
          "sku": {
            "type": "string",
            "example": "M3-AKB"
          },
          "imageURL": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/image.png"
          },
          "imageURLs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "example": "[\"https://example.com/image1.png\", \"https://example.com/image2.png\"]"
          },
          "headline": {
            "type": "string",
            "example": "Bracelet"
          },
          "price": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "specifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        },
        "required": [
          "id",
          "name",
          "sku",
          "price"
        ]
      },
      "TransactionWithoutPrice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aY54zww15xcA"
          },
          "clientId": {
            "type": "string",
            "example": "aX7652csaaB32"
          },
          "clientName": {
            "type": "string",
            "example": "Bar Baz"
          },
          "title": {
            "type": "string",
            "example": "Instore Transaction"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "advisorName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "storeName": {
            "type": "string",
            "example": "Example Store"
          },
          "itemCount": {
            "type": "integer",
            "example": 5
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionItem"
            }
          }
        },
        "required": [
          "id",
          "clientId",
          "title",
          "datetime",
          "storeName",
          "itemCount"
        ]
      },
      "Transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionWithoutPrice"
          },
          {
            "type": "object",
            "properties": {
              "price": {
                "$ref": "#/components/schemas/TypedValue"
              }
            }
          }
        ],
        "required": [
          "price"
        ]
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "TransactionsV2": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionV2"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "TransactionV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction Id.",
            "example": "00000001"
          },
          "datetime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "advisorName": {
            "type": "string",
            "example": "John Doe"
          },
          "products": {
            "type": "array",
            "description": "Array of transaction items.",
            "items": {
              "$ref": "#/components/schemas/TransactionItemV2"
            }
          },
          "additionalData": {
            "type": "array",
            "description": "Array of transaction additional data.",
            "items": {
              "$ref": "#/components/schemas/TransactionAdditionalData"
            }
          },
          "subtotal": {
            "description": "Subtotal amount.",
            "$ref": "#/components/schemas/Price"
          },
          "tax": {
            "description": "Total amount of taxes.",
            "$ref": "#/components/schemas/Price"
          },
          "paymentId": {
            "type": "string",
            "description": "ID of the payment if it exists (deprecated, use payments[].id)",
            "example": "00000001",
            "deprecated": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPayment"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          }
        },
        "required": [
          "id",
          "datetime",
          "totalPrice",
          "advisorName",
          "products",
          "additionalData",
          "subtotal",
          "tax",
          "payments",
          "client"
        ]
      },
      "TransactionStatus": {
        "type": "string",
        "description": "Transaction current status.",
        "enum": [
          "draft",
          "activated",
          "cancelled",
          "paid",
          "deliveryInProgress",
          "deliveredToStore",
          "deliveredToClient"
        ]
      },
      "TransactionItemV2": {
        "title": "TransactionItemV2",
        "properties": {
          "sku": {
            "description": "ID of the product.",
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "image": {
            "description": "Image of product.",
            "type": "string",
            "format": "uri",
            "example": "http://example.com/image1.jpg"
          },
          "name": {
            "description": "Name of the item.",
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/TransactionItemAttributes"
          },
          "quantity": {
            "description": "Number of items.",
            "format": "int32",
            "type": "integer"
          },
          "price": {
            "type": "object",
            "properties": {
              "excludingTax": {
                "description": "Item amount excluding the tax.",
                "$ref": "#/components/schemas/Price"
              },
              "includingTax": {
                "description": "Item amount including the tax.",
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "excludingTax",
              "includingTax"
            ]
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "tax": {
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/Price"
              },
              "percentage": {
                "description": "Tax percentage, in minor units.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "amount"
            ]
          }
        },
        "required": [
          "sku",
          "category",
          "name",
          "attributes",
          "quantity",
          "price",
          "availability",
          "tax"
        ]
      },
      "TransactionAdditionalData": {
        "title": "TransactionAdditionalData",
        "properties": {
          "name": {
            "description": "Name of the item.",
            "type": "string"
          },
          "type": {
            "description": "Type of the item.",
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          }
        },
        "required": [
          "name",
          "type",
          "price"
        ]
      },
      "TransactionItemAttributes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TransactionItemAttributesItem"
        }
      },
      "TransactionItemAttributesItem": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "displayValue": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "displayValue"
        ]
      },
      "TransactionPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment id within OMS",
            "example": "a0F25000008AYAFEA4"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "name": {
            "type": "string",
            "description": "Payment Name",
            "example": "P-0000001118"
          },
          "amount": {
            "$ref": "#/components/schemas/Price"
          },
          "datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the payment was done",
            "example": "2021-11-08T00:00:00.000Z"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date from when the payment link will expire (if applicable)",
            "example": "2021-11-08T00:00:00.000Z"
          },
          "paymentLink": {
            "format": "uri",
            "type": "string",
            "description": "Payment link (if applicable)",
            "example": "paybylink.com"
          },
          "paymentProviderId": {
            "type": "string",
            "description": "Payment id within payment provider (if applicable)",
            "example": "00000114"
          },
          "paymentProvider": {
            "type": "string",
            "description": "Payment provider",
            "example": "Adyen"
          },
          "invoiceReference": {
            "type": "string",
            "description": "Invoice reference Number"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund Method"
          }
        },
        "required": [
          "id"
        ]
      },
      "PaymentStatus": {
        "type": "string",
        "description": "Status of a payment.",
        "enum": [
          "active",
          "completed",
          "expired",
          "paymentPending",
          "cancelled",
          "refunded"
        ]
      },
      "ListType": {
        "type": "string",
        "enum": [
          "campaign",
          "featured",
          "personal"
        ]
      },
      "MembersType": {
        "type": "string",
        "enum": [
          "static",
          "live"
        ]
      },
      "BaseList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX31sv564Mak"
          },
          "title": {
            "type": "string",
            "example": "VIP"
          },
          "subtitle": {
            "type": "string",
            "example": "Very important clients"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "CampaignList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "type": "object",
            "properties": {
              "imageURL": {
                "type": "string",
                "format": "uri",
                "example": "http://example.com/image"
              },
              "tag": {
                "type": "string",
                "example": "VIP"
              }
            },
            "required": [
              "imageURL"
            ]
          }
        ]
      },
      "FeaturedList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "type": "object",
            "properties": {
              "imageURL": {
                "type": "string",
                "format": "uri",
                "example": "http://example.com/image"
              }
            }
          }
        ]
      },
      "PersonalList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "type": "object",
            "properties": {
              "membersType": {
                "$ref": "#/components/schemas/MembersType"
              }
            },
            "required": [
              "membersType"
            ]
          }
        ]
      },
      "ClientLists": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignList"
            }
          },
          "featured": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeaturedList"
            }
          },
          "personal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalList"
            }
          }
        }
      },
      "ClientListHeader": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "My Clients"
          },
          "description": {
            "type": "string",
            "example": "My clients"
          },
          "listType": {
            "$ref": "#/components/schemas/ListType"
          },
          "membersType": {
            "$ref": "#/components/schemas/MembersType"
          },
          "caption": {
            "type": "string",
            "example": "Clients in my store"
          },
          "imageURL": {
            "type": "string",
            "format": "uri",
            "example": "http://example.com/image"
          },
          "tag": {
            "type": "string",
            "example": "MY"
          }
        },
        "required": [
          "title",
          "listType",
          "membersType"
        ]
      },
      "ClientWithSubtitle": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "aZx0c1a6857dac"
          },
          "clientName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "advisorId": {
            "type": "string",
            "example": "aZx0edda54771z"
          },
          "segments": {
            "example": [
              "10K"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subtitle": {
            "deprecated": true,
            "description": "This field will be the first entry in detailsFields.",
            "$ref": "#/components/schemas/TypedValue"
          },
          "detailsFields": {
            "type": "array",
            "description": "Additional fields depending on search.",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        },
        "required": [
          "clientId",
          "segments"
        ]
      },
      "ClientListMember": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientWithSubtitle"
          },
          {
            "type": "object",
            "properties": {
              "clientListMemberId": {
                "type": "string",
                "example": "aX31sv564May"
              }
            }
          }
        ]
      },
      "ClientList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX31sv564Mac"
          },
          "header": {
            "$ref": "#/components/schemas/ClientListHeader"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientListMember"
            }
          }
        },
        "required": [
          "id",
          "header",
          "members"
        ]
      },
      "SortKeyValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "name"
          },
          "order": {
            "$ref": "#/components/schemas/SortDirection"
          }
        }
      },
      "AvailableSort": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "id"
          },
          "display": {
            "type": "string",
            "example": "Id"
          }
        },
        "required": [
          "key",
          "display"
        ]
      },
      "SelectedSort": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "name"
          },
          "order": {
            "$ref": "#/components/schemas/SortDirection"
          }
        },
        "required": [
          "key",
          "order"
        ]
      },
      "Sort": {
        "type": "object",
        "properties": {
          "availableSorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSort"
            }
          },
          "selectedSort": {
            "$ref": "#/components/schemas/SelectedSort"
          }
        },
        "required": [
          "availableSorts",
          "selectedSort"
        ]
      },
      "SortDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "CreateClientList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Clients"
          },
          "listType": {
            "$ref": "#/components/schemas/ListType"
          },
          "memberIds": {
            "description": "Can not exists when `criteria` is populated.",
            "example": [
              "aR651sv564Mac"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "criteria": {
            "description": "Can not exists when `memberIds` is populated.",
            "type": "object",
            "example": {}
          }
        },
        "required": [
          "name",
          "listType"
        ]
      },
      "CommonQueryResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "filters": {
            "type": "object"
          }
        },
        "required": [
          "items"
        ]
      },
      "PaginationResponseProperties": {
        "type": "object",
        "properties": {
          "totalNumberOfPages": {
            "type": "integer",
            "description": "Total number of pages for the given result.",
            "minimum": 0,
            "example": 2
          },
          "next_cursor": {
            "type": "string",
            "description": "The `cursor` to be provided for fetching remaining results.",
            "example": "01g5E00001Ned2tQAB"
          }
        }
      },
      "Clients": {
        "allOf": [
          {
            "properties": {
              "clients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClientWithSubtitle"
                }
              }
            },
            "required": [
              "clients"
            ]
          },
          {
            "$ref": "#/components/schemas/PaginationResponseProperties"
          }
        ],
        "required": [
          "clients"
        ]
      },
      "ClientDetailsContent": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "clientDetails.personal"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        },
        "required": [
          "title",
          "items"
        ]
      },
      "ClientDetails": {
        "type": "object",
        "properties": {
          "clientDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientDetailsContent"
            }
          }
        },
        "required": [
          "clientDetails"
        ]
      },
      "ClientNoteEdit": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "example": "Shows interest in art galaries and such."
          },
          "advisorId": {
            "type": "string",
            "example": 123
          },
          "storeId": {
            "type": "string",
            "example": 456
          }
        },
        "required": [
          "content",
          "advisorId",
          "storeId"
        ]
      },
      "ClientNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aX7652csa4132"
          },
          "content": {
            "type": "string",
            "example": "Shows interest in art galaries and such."
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26+00:00"
          },
          "advisorName": {
            "type": "string",
            "example": "Foo Bar"
          },
          "storeName": {
            "type": "string",
            "example": "Example Store"
          },
          "editable": {
            "type": "boolean",
            "example": true
          },
          "deleteable": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "id",
          "content",
          "datetime",
          "advisorName",
          "storeName",
          "editable",
          "deleteable"
        ]
      },
      "ClientNotes": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientNote"
            }
          }
        },
        "required": [
          "notes"
        ]
      },
      "ClientPreferences": {
        "type": "object",
        "properties": {
          "preferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            }
          }
        },
        "required": [
          "preferences"
        ]
      },
      "SearchScope": {
        "type": "string",
        "enum": [
          "assignedToMe",
          "global"
        ]
      },
      "CreateClientCustomFieldString": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "myTextProperty"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "string"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "CreateClientCustomFieldNumber": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "myNumberProperty"
          },
          "value": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "number"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "CreateClientCustomFieldBoolean": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "myBooleanProperty"
          },
          "value": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "CreateClientCustomFieldDate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "birthdate"
          },
          "value": {
            "type": "string",
            "format": "date",
            "example": "1983-02-12"
          },
          "type": {
            "type": "string",
            "enum": [
              "date"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "CreateClientData": {
        "properties": {
          "customFields": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateClientCustomFieldString"
                },
                {
                  "$ref": "#/components/schemas/CreateClientCustomFieldNumber"
                },
                {
                  "$ref": "#/components/schemas/CreateClientCustomFieldBoolean"
                },
                {
                  "$ref": "#/components/schemas/CreateClientCustomFieldDate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "string": "#/components/schemas/CreateClientCustomFieldString",
                  "number": "#/components/schemas/CreateClientCustomFieldNumber",
                  "boolean": "#/components/schemas/CreateClientCustomFieldBoolean",
                  "date": "#/components/schemas/CreateClientCustomFieldDate"
                }
              }
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchClient": {
        "$ref": "#/components/schemas/CreateClientData"
      },
      "EmptyJSON": {
        "type": "object",
        "properties": {}
      },
      "CreateLinkResponse": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "format": "uri",
            "description": "Generated unique link",
            "example": "https://apis.dev.lvmh.clienteling.lvmhda.com/clients/v1/dcm?q=7IUrI4Vn7jSF"
          }
        },
        "required": [
          "link"
        ]
      },
      "RegistrationTokenResponse": {
        "title": "RegistrationTokenResponse",
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "8278961f51f"
          }
        }
      },
      "GetConnectLinkByExternalId": {
        "type": "object",
        "properties": {
          "connectLinkId": {
            "type": "string",
            "description": "Connect link id"
          },
          "agentLink": {
            "type": "string",
            "format": "uri",
            "description": "URL for agent to start one to one in a browser"
          },
          "clientLink": {
            "type": "string",
            "format": "uri",
            "description": "URL for client to connect to one to one in a browser"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "activeTime": {
            "description": "Indicates at what time the users can connect to the consultation link",
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "externalId": {
            "type": "string",
            "description": "Related id for which this link has been created."
          },
          "title": {
            "type": "string",
            "description": "Meeting title"
          }
        },
        "required": [
          "connectLinkId",
          "agentLink",
          "clientLink",
          "startTime",
          "endTime",
          "activeTime",
          "externalId"
        ]
      },
      "GetConnectLinkByExternalIdResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GetConnectLinkByExternalId"
        }
      },
      "CreateConnectLinkBody": {
        "type": "object",
        "properties": {
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "externalId": {
            "type": "string",
            "description": "Related id to create a link for. Can be either an interaction id, an appointment id, etc..."
          },
          "title": {
            "type": "string",
            "description": "Meeting title"
          }
        },
        "required": [
          "externalId"
        ]
      },
      "UpdateConnectLinkBody": {
        "type": "object",
        "properties": {
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "title": {
            "type": "string",
            "description": "Meeting title"
          }
        },
        "required": [
          "startTime",
          "endTime"
        ]
      },
      "ProductCurationItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "PRODUCTID001"
          },
          "sku": {
            "type": "string",
            "example": "0J0001-6J0197-017"
          },
          "name": {
            "type": "string",
            "example": "PRODUCT_NAME"
          },
          "shortDescription": {
            "type": "string",
            "description": "The short description of the current product",
            "example": "this product is ..."
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "priceRange": {
            "type": "object",
            "properties": {
              "min": {
                "$ref": "#/components/schemas/Price"
              },
              "max": {
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "min",
              "max"
            ]
          },
          "category": {
            "type": "string",
            "example": "PRODUCT_CATEGORY"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string"
                },
                "displayValue": {
                  "type": "string"
                }
              },
              "required": [
                "displayName",
                "displayValue"
              ]
            }
          }
        },
        "required": [
          "productId",
          "name",
          "shortDescription",
          "category",
          "assets",
          "attributes"
        ]
      },
      "Asset": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "catalog",
              "personal"
            ]
          },
          "id": {
            "type": "string",
            "description": "Unique asset id within the curations"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "contentType": {
            "type": "string",
            "example": "image/png"
          },
          "isSelected": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "url",
          "contentType",
          "source",
          "isSelected"
        ]
      },
      "Curations": {
        "type": "object",
        "properties": {
          "curations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Curation"
            }
          }
        },
        "required": [
          "curations"
        ]
      },
      "Curation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "CURATIONID001"
          },
          "name": {
            "type": "string",
            "example": "test curation"
          },
          "ownerName": {
            "type": "string",
            "example": "John DOE"
          },
          "readOnly": {
            "type": "boolean",
            "description": "True if no further modification are possible on this curation."
          },
          "parentId": {
            "type": "string",
            "description": "Id of a curation which has been duplicated to this one.",
            "example": "CURATIONID000"
          },
          "originalId": {
            "type": "string",
            "description": "Id of the oldest ancestor curation from which this curation is derived.",
            "example": "CURATIONID000"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCurationItem"
            }
          }
        },
        "required": [
          "id",
          "name",
          "items",
          "ownerName",
          "readOnly"
        ]
      },
      "CreateProductCurationItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "PRODUCTID001"
          }
        },
        "required": [
          "productId"
        ]
      },
      "PatchProductCurationItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "PRODUCTID001"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchAsset"
            }
          }
        },
        "required": [
          "productId"
        ]
      },
      "PatchAsset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique asset id within the curations"
          },
          "isSelected": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "isSelected"
        ]
      },
      "CreateOrUpdateCurationBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test curation"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductCurationItem"
            }
          }
        },
        "required": [
          "name",
          "items"
        ]
      },
      "PatchCurationBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test curation"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProductCurationItem"
            }
          }
        }
      },
      "UploadAssetBody": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "assets",
          "productIds"
        ]
      },
      "UploadAssetResponse": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "ksldfio39kekj883"
        }
      },
      "AddProductsBody": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductCurationItem"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "IDashboardsV2": {
        "type": "object",
        "properties": {
          "itemsV2": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IDashboardSimpleComponent"
                },
                {
                  "$ref": "#/components/schemas/IDashboardAbstractComponent"
                },
                {
                  "$ref": "#/components/schemas/IDashboardMultiAbstractComponent"
                }
              ],
              "discriminator": {
                "propertyName": "dataType",
                "mapping": {
                  "simpleComponent": "#/components/schemas/IDashboardSimpleComponent",
                  "abstractComponent": "#/components/schemas/IDashboardAbstractComponent",
                  "multiAbstractComponent": "#/components/schemas/IDashboardMultiAbstractComponent"
                }
              }
            }
          },
          "filters": {
            "type": "object",
            "properties": {
              "availableFilters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "userId"
                  ]
                }
              },
              "selectedFilter": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "userId",
                  "username"
                ],
                "nullable": true
              }
            },
            "required": [
              "availableFilters",
              "selectedFilter"
            ]
          }
        },
        "required": [
          "itemsV2",
          "filters"
        ]
      },
      "IDashboardAbstractComponent": {
        "type": "object",
        "properties": {
          "componentId": {
            "type": "string"
          },
          "componentTitle": {
            "type": "string"
          },
          "clientGraph": {
            "type": "string",
            "enum": [
              "BAR",
              "SINGLE_VALUE",
              "CIRCLES",
              "GAUGE",
              "HORIZONTAL",
              "COMBINE_BAR"
            ],
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "enum": [
              "abstractComponent"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "componentTitle": {
                  "type": "string"
                },
                "value": {
                  "type": "number",
                  "nullable": true
                }
              },
              "required": [
                "componentTitle"
              ]
            }
          },
          "customLabels": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "metricLabel": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "componentId",
          "componentTitle",
          "dataType",
          "data",
          "subtitle",
          "customLabels"
        ]
      },
      "IDashboardMultiAbstractComponent": {
        "type": "object",
        "properties": {
          "componentId": {
            "type": "string"
          },
          "componentTitle": {
            "type": "string"
          },
          "clientGraph": {
            "type": "string",
            "enum": [
              "BAR",
              "SINGLE_VALUE",
              "CIRCLES",
              "GAUGE",
              "HORIZONTAL",
              "COMBINE_BAR"
            ],
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "enum": [
              "multiAbstractComponent"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "label",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "label",
                "data"
              ]
            }
          },
          "customLabels": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "metricLabel": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "componentId",
          "componentTitle",
          "dataType",
          "data",
          "subtitle",
          "customLabels"
        ]
      },
      "IDashboardSimpleComponent": {
        "type": "object",
        "properties": {
          "componentId": {
            "type": "string"
          },
          "componentTitle": {
            "type": "string"
          },
          "clientGraph": {
            "type": "string",
            "enum": [
              "BAR",
              "SINGLE_VALUE",
              "CIRCLES",
              "GAUGE",
              "HORIZONTAL",
              "COMBINE_BAR"
            ],
            "nullable": true
          },
          "value": {
            "type": "number",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "enum": [
              "simpleComponent"
            ]
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "metricLabel": {
            "type": "string",
            "nullable": true
          },
          "customLabels": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "required": [
          "componentId",
          "componentTitle",
          "dataType",
          "subtitle",
          "customLabels"
        ]
      },
      "IDashboardType": {
        "type": "string",
        "enum": [
          "multiValueBar",
          "singleValueBar",
          "simpleStat",
          "circularStat",
          "multiValueCircular"
        ]
      },
      "IDashboards": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IDashboardMultiValueBar"
                },
                {
                  "$ref": "#/components/schemas/IDashboardSingleValueBar"
                },
                {
                  "$ref": "#/components/schemas/IDashboardSimpleStat"
                },
                {
                  "$ref": "#/components/schemas/IDashboardCircularStat"
                },
                {
                  "$ref": "#/components/schemas/IDashboardMultiValueCircular"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "multiValueBar": "#/components/schemas/IDashboardMultiValueBar",
                  "singleValueBar": "#/components/schemas/IDashboardSingleValueBar",
                  "simpleStat": "#/components/schemas/IDashboardSimpleStat",
                  "circularStat": "#/components/schemas/IDashboardCircularStat",
                  "multiValueCircular": "#/components/schemas/IDashboardMultiValueCircular"
                }
              }
            }
          },
          "title": {
            "type": "string"
          },
          "filters": {
            "$ref": "#/components/schemas/IFilters"
          }
        },
        "required": [
          "items",
          "title",
          "filters"
        ]
      },
      "IDashboardMultiValueBarBarsProgressValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "color": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "displayValue": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "color",
          "name",
          "displayValue"
        ]
      },
      "IDashboardMultiValueBarBars": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "progressBarValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDashboardMultiValueBarBarsProgressValue"
            }
          }
        },
        "required": [
          "title",
          "progressBarValues"
        ]
      },
      "IDashboardMultiValueBar": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDashboardType",
            "example": "multiValueBar"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "bars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDashboardMultiValueBarBars"
            }
          }
        },
        "required": [
          "title",
          "type",
          "value",
          "bars"
        ]
      },
      "IDashboardSingleValueBarProgressValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 0.55
          }
        },
        "required": [
          "value"
        ]
      },
      "IDashboardSingleValueBar": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDashboardType",
            "example": "singleValueBar"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "subtitle": {
            "type": "string"
          },
          "progressBarValue": {
            "$ref": "#/components/schemas/IDashboardSingleValueBarProgressValue"
          }
        },
        "required": [
          "title",
          "type",
          "value",
          "progressBarValue"
        ]
      },
      "IDashboardSimpleStat": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDashboardType",
            "example": "simpleStat"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "subtitle": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "type",
          "value"
        ]
      },
      "IDashboardCircularStatCircularValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "color": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "displayValue": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "color",
          "name",
          "displayValue"
        ]
      },
      "IDashboardCircularStat": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDashboardType",
            "example": "circularStat"
          },
          "value": {
            "$ref": "#/components/schemas/TypedValue"
          },
          "subtitle": {
            "type": "string"
          },
          "circularBarValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDashboardCircularStatCircularValue"
            }
          }
        },
        "required": [
          "title",
          "type",
          "value",
          "subtitle",
          "circularBarValues"
        ]
      },
      "IDashboardMultiValueCircularItem": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 0.55
          },
          "icon": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "icon",
          "color",
          "title"
        ]
      },
      "IDashboardMultiValueCircular": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IDashboardType",
            "example": "multiValueCircular"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDashboardMultiValueCircularItem"
            }
          }
        },
        "required": [
          "title",
          "type",
          "items"
        ]
      },
      "ISelectedFilters": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFilterItemDefault"
            }
          }
        },
        "required": [
          "key",
          "items"
        ]
      },
      "IAvailableFilters": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IFilterText"
          },
          {
            "$ref": "#/components/schemas/IFilterImage"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/IFilterText",
            "images": "#/components/schemas/IFilterImage"
          }
        }
      },
      "IFilters": {
        "type": "object",
        "properties": {
          "availableFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAvailableFilters"
            }
          },
          "selectedFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISelectedFilters"
            }
          }
        },
        "required": [
          "availableFilters",
          "selectedFilters"
        ]
      },
      "IFilterItemDefault": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "value"
        ]
      },
      "IFilterText": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "text",
              "images"
            ],
            "type": "string",
            "example": "text"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFilterItemDefault"
            }
          },
          "key": {
            "type": "string"
          },
          "apiName": {
            "type": "string"
          },
          "translationKey": {
            "type": "string"
          },
          "pluralTranslationKey": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isMultiSelect": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "items",
          "key",
          "apiName",
          "translationKey",
          "isRequired",
          "isMultiSelect"
        ]
      },
      "IFilterItemImage": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "imageURL": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "displayName",
          "value",
          "imageURL"
        ]
      },
      "IFilterImage": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "text",
              "images"
            ],
            "type": "string",
            "example": "images"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFilterItemImage"
            }
          },
          "key": {
            "type": "string"
          },
          "apiName": {
            "type": "string"
          },
          "translationKey": {
            "type": "string"
          },
          "pluralTranslationKey": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isMultiSelect": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "items",
          "key",
          "apiName",
          "translationKey",
          "isRequired",
          "isMultiSelect"
        ]
      },
      "Events": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "events"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "00U3M000001phBFUAL"
          },
          "type": {
            "type": "string",
            "description": "Define which type of event it is",
            "enum": [
              "Appointment"
            ],
            "example": "Appointment"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "0054K00000460WIQAX"
              },
              "name": {
                "type": "string",
                "example": "Julie Mascarpin"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "subject": {
            "type": "string",
            "example": "Care & Repair"
          },
          "startTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "endTime": {
            "$ref": "#/components/schemas/ISO8601DateTimeString"
          },
          "resourceId": {
            "type": "string",
            "description": "The id of the corresponding resource describe in the event type",
            "example": "0054K00000460WIYSS"
          }
        },
        "required": [
          "id",
          "type",
          "user",
          "client",
          "subject",
          "startTime",
          "endTime",
          "resourceId"
        ]
      },
      "EventFilters": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventFilter"
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "EventFilter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the filter",
            "example": "appointmentChannel"
          },
          "name": {
            "type": "string",
            "description": "The localised display name of the filter",
            "example": "Appointment Channel"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventFilterValueItem"
            }
          }
        },
        "required": [
          "key",
          "name",
          "values"
        ]
      },
      "EventFilterValueItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the value. This will be returned with the filter key as its value",
            "example": "Call"
          },
          "name": {
            "type": "string",
            "description": "The localised name of the value that will be displayed as filter option",
            "example": "Virtual appointement"
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "BaseNotification": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "userId": {
            "type": "string",
            "description": "Target user id (must be email when creating a notification)",
            "example": "john.doe@lvmh.com"
          },
          "metadata": {
            "$ref": "#/components/schemas/NotificationMetadata"
          }
        },
        "required": [
          "userId",
          "metadata"
        ]
      },
      "BaseCreateNotification": {
        "allOf": [
          {
            "properties": {
              "userDeviceToken": {
                "type": "string",
                "description": "Target user device token. Takes precedence over token from user subscription"
              },
              "priority": {
                "type": "boolean",
                "description": "Mark this notification as high priority. This makes the notification bypasses the grouping process and be sent immediately to the CA device."
              },
              "source": {
                "description": "Source from which this notification has been emitted",
                "type": "string",
                "example": "orders microservice"
              },
              "skipPersistence": {
                "type": "boolean",
                "description": "Set to true if you don't want to store this notification.",
                "default": false
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseNotification"
          }
        ]
      },
      "CreateNotificationBody": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCreateNotification"
          }
        ]
      },
      "NotificationType": {
        "type": "string",
        "description": "Notification type",
        "example": "pblURLExpired",
        "enum": [
          "pblURLExpired",
          "pblPaymentMade"
        ]
      },
      "Notifications": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          }
        },
        "required": [
          "notifications"
        ]
      },
      "Notification": {
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "example": "61926f8b26e979a7a6e2c5d8"
              },
              "createdDate": {
                "description": "Notification creation date",
                "type": "string",
                "format": "date-time",
                "example": "2022-01-22T13:52:06.000Z"
              },
              "isRead": {
                "type": "boolean",
                "description": "Whether the notification has been read or not"
              }
            },
            "required": [
              "id",
              "createdDate",
              "isRead"
            ]
          },
          {
            "$ref": "#/components/schemas/BaseNotification"
          }
        ]
      },
      "NotificationMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PblURLExpiredNotification"
          },
          {
            "$ref": "#/components/schemas/PblPaymentMadeNotification"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "pblURLExpired": "#/components/schemas/PblURLExpiredNotification",
            "pblPaymentMade": "#/components/schemas/PblPaymentMadeNotification"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Subscription ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "userDeviceToken": {
            "type": "string",
            "description": "Device token that will be used to send notifications"
          },
          "createdDate": {
            "description": "Subscription creation date",
            "type": "string",
            "format": "date-time",
            "example": "2022-01-22T13:52:06.000Z"
          },
          "notificationTypes": {
            "type": "array",
            "description": "Notification types subscribed by the user",
            "items": {
              "type": "string",
              "example": [
                "info",
                "appointment"
              ]
            }
          }
        },
        "required": [
          "id",
          "userId",
          "userDeviceToken",
          "createdDate",
          "notificationTypes"
        ]
      },
      "Currency": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A currency code in ISO-4217. 3 letters, uppercase.",
            "pattern": "^[A-Z]{3}$",
            "example": "EUR"
          },
          "divisor": {
            "description": "The number of minor units in a major unit of the currency",
            "type": "integer",
            "example": 100
          }
        },
        "required": [
          "code",
          "divisor"
        ]
      },
      "DeliveryType": {
        "title": "DeliveryType",
        "type": "string",
        "enum": [
          "pickup",
          "standard",
          "express"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/Client"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "items": {
            "type": "array",
            "description": "Array of order items.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "id": {
            "type": "string",
            "description": "Order Id.",
            "example": "00000001"
          },
          "status": {
            "type": "string",
            "description": "Order current status.",
            "enum": [
              "draft",
              "activated",
              "cancelled",
              "paid",
              "deliveryInProgress",
              "deliveredToStore",
              "deliveredToClient"
            ]
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal amount.",
            "example": 0
          },
          "tax": {
            "type": "number",
            "description": "Total amount of taxes.",
            "example": 0
          },
          "total": {
            "type": "number",
            "description": "Total amount including taxes.",
            "example": 0
          },
          "paymentId": {
            "type": "string",
            "description": "ID of the payment if it exists",
            "example": "00000001"
          }
        },
        "required": [
          "client",
          "currency",
          "delivery",
          "items",
          "id",
          "status",
          "subtotal",
          "tax",
          "total"
        ]
      },
      "OrderItem": {
        "title": "OrderItem",
        "properties": {
          "amount": {
            "type": "object",
            "properties": {
              "excludingTax": {
                "description": "Item amount excluding the tax, in minor units.",
                "format": "int64",
                "type": "integer"
              },
              "includingTax": {
                "description": "Item amount including the tax, in minor units.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "excludingTax",
              "includingTax"
            ]
          },
          "attributes": {
            "$ref": "#/components/schemas/TransactionItemAttributes"
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "id": {
            "description": "ID of the item.",
            "type": "string"
          },
          "name": {
            "description": "Name of the item.",
            "type": "string"
          },
          "quantity": {
            "description": "Number of items.",
            "format": "int32",
            "type": "integer"
          },
          "image": {
            "description": "Image of product.",
            "type": "string",
            "example": "http://example.com/image1.jpg"
          },
          "tax": {
            "type": "object",
            "properties": {
              "amount": {
                "description": "Tax amount, in minor units.",
                "format": "int64",
                "type": "integer"
              },
              "category": {
                "description": "Required for AfterPay. Tax category: High, Low, None, Zero",
                "enum": [
                  "High",
                  "Low",
                  "None",
                  "Zero"
                ],
                "type": "string"
              },
              "percentage": {
                "description": "Tax percentage, in minor units.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "amount"
            ]
          }
        },
        "required": [
          "amount",
          "attributes",
          "availability",
          "category",
          "id",
          "name",
          "quantity",
          "tax",
          "image"
        ]
      },
      "NotificationRequestItem": {
        "title": "NotificationRequestItem",
        "type": "object",
        "properties": {
          "additionalData": {
            "$ref": "#/components/schemas/AdditionalData"
          },
          "eventCode": {
            "type": "string",
            "description": "The type of event that triggered the notification. For a list of possible eventCode values, refer to https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes.",
            "enum": [
              "AUTHORISATION",
              "AUTHORISATION_ADJUSTMENT",
              "CANCELLATION",
              "CANCEL_OR_REFUND",
              "CAPTURE",
              "CAPTURE_FAILED",
              "HANDLED_EXTERNALLY",
              "ORDER_OPENED",
              "ORDER_CLOSED",
              "REFUND",
              "REFUND_FAILED",
              "REFUNDED_REVERSED",
              "REFUND_WITH_DATA",
              "REPORT_AVAILABLE",
              "VOID_PENDING_REFUND"
            ],
            "example": "AUTHORISATION"
          },
          "eventDate": {
            "format": "date-time",
            "type": "string",
            "description": "The time of the event. Format: ISO 8601 (http://www.w3.org/TR/NOTE-datetime); YYYY-MM-DDThh:mm:ssTZD\n",
            "example": "2021-02-09T07:28:54+01:00"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "merchantAccountCode": {
            "type": "string",
            "description": "The merchant account identifier for which the payment link is created.",
            "example": "LVMHAccount"
          },
          "merchantReference": {
            "type": "string",
            "description": "This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.",
            "example": "8313842560770001"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method the shopper paid with.",
            "example": "visa"
          },
          "pspReference": {
            "type": "string",
            "description": "Adyen's 16-character unique reference associated with the transaction/the request. This value is globally unique; quote it when communicating with us about this request.",
            "example": "test_AUTHORISATION_4"
          },
          "reason": {
            "type": "string",
            "description": "In case of a failure, contains a short description of the problem",
            "example": "REFUSED"
          },
          "success": {
            "type": "string",
            "description": "The outcome of the event, set to either \"true\" or \"false\".",
            "enum": [
              "true",
              "false"
            ],
            "example": "false"
          }
        },
        "required": [
          "additionalData",
          "eventCode",
          "success",
          "eventDate"
        ]
      },
      "AdditionalData": {
        "title": "AdditionalData",
        "type": "object",
        "description": "Additional information about the shopper or the transaction. For more information about the fields that you can receive in additionalData, refer to https://docs.adyen.com/development-resources/webhooks/additional-settings",
        "properties": {
          "expiryDate": {
            "type": "string",
            "example": "12/2012"
          },
          "NAME1": {
            "type": "string",
            "example": "VALUE1"
          },
          "authCode": {
            "type": "string",
            "example": 50683
          },
          "paymentLinkId": {
            "type": "string",
            "example": "PLCC2C2C4C02616294"
          },
          "cardSummary": {
            "type": "string",
            "example": 4305
          },
          "threeds2.cardEnrolled": {
            "type": "string",
            "example": "false"
          },
          "totalFraudScore": {
            "type": "string",
            "example": "10"
          },
          "hmacSignature": {
            "type": "string",
            "example": "aPWhvdRgjYcPL2XFJYowdo58p9njcjV84HuDZ/goAT0="
          },
          "NAME2": {
            "type": "string",
            "example": "VALUE2"
          },
          "fraudCheck-6-ShopperIpUsage": {
            "type": "string",
            "example": "10"
          }
        }
      },
      "Amount": {
        "title": "Amount",
        "type": "object",
        "properties": {
          "currency": {
            "description": "The three-character [ISO currency code]",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "value": {
            "description": "The amount of the transaction, in [minor units]",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "value",
          "currency"
        ]
      },
      "Delivery": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DeliveryType"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The price of this delivery in [minor units]",
            "example": 299
          }
        },
        "required": [
          "type",
          "amount"
        ]
      },
      "PaymentLink": {
        "title": "PaymentLink",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment link Id",
            "example": "PL000000000000000"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction, in [minor units]",
            "format": "int64"
          },
          "expiresAt": {
            "type": "string",
            "example": "2020-07-23T07:11:26.000+00:00Z",
            "format": "date-time",
            "description": "Expiration date of the payment"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "url": {
            "description": "The URL at which the shopper can complete the payment.",
            "example": "https://test.adyen.link/PL000000000000000",
            "type": "string",
            "format": "uri"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order this payment is linked to.",
            "example": "00000001"
          }
        },
        "required": [
          "amount",
          "currency",
          "expiresAt",
          "id",
          "status",
          "url"
        ]
      },
      "PblURLExpiredNotification": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pblURLExpired"
            ]
          },
          "payload": {
            "type": "object",
            "properties": {
              "interactionId": {
                "type": "string",
                "description": "ID of the Pay-by-Link interaction",
                "example": "00T3M000005avLcUAI"
              }
            },
            "required": [
              "interactionId"
            ]
          }
        },
        "required": [
          "type",
          "payload"
        ]
      },
      "PblPaymentMadeNotification": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pblPaymentMade"
            ]
          },
          "payload": {
            "type": "object",
            "properties": {
              "transactionId": {
                "type": "string",
                "description": "ID of the transaction",
                "example": "8013M000000Fr06QAC"
              },
              "currency": {
                "type": "string",
                "description": "A currency code in ISO-4217. 3 letters, uppercase.",
                "pattern": "^[A-Z]{3}$",
                "example": "EUR"
              },
              "divisor": {
                "type": "integer",
                "example": 100
              },
              "amount": {
                "type": "number",
                "description": "The amount of the transaction"
              },
              "paymentDate": {
                "type": "string",
                "format": "date-time",
                "description": "Time and date of the order's payment",
                "example": "2020-07-23T07:11:26+00:00"
              }
            },
            "required": [
              "transactionId",
              "paymentDate",
              "amount",
              "divisor",
              "currency"
            ]
          }
        },
        "required": [
          "type",
          "payload"
        ]
      },
      "PatchNotificationBody": {
        "type": "object",
        "properties": {
          "isRead": {
            "type": "boolean"
          }
        },
        "required": [
          "isRead"
        ]
      },
      "PatchSubscriptionBody": {
        "type": "object",
        "properties": {
          "userDeviceToken": {
            "type": "string",
            "description": "Device token that will be used to send notifications"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Notification types that will be subscribed to",
            "example": [
              "info",
              "appointment"
            ]
          }
        }
      },
      "OrderCreationBody": {
        "title": "OrderCreationBody",
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "TODO",
            "example": "ax234631ASDasd"
          },
          "deliveryType": {
            "$ref": "#/components/schemas/DeliveryType"
          },
          "items": {
            "type": "array",
            "description": "TODO",
            "items": {
              "type": "object",
              "description": "TODO",
              "properties": {
                "sku": {
                  "type": "string",
                  "example": "A000001"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 0
                }
              },
              "required": [
                "sku",
                "quantity"
              ]
            }
          }
        },
        "required": [
          "clientId",
          "deliveryType",
          "items"
        ]
      },
      "PaymentCreationBody": {
        "title": "PaymentCreationBody",
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "TODO",
            "example": "00000001"
          }
        },
        "required": [
          "orderId"
        ]
      },
      "PaymentNotificationWebhookBody": {
        "title": "PaymentNotificationWebhookBody",
        "properties": {
          "live": {
            "type": "string",
            "description": "Specifies whether the event that triggered the notification happened on the test or live environment.",
            "enum": [
              "true",
              "false"
            ],
            "example": "false"
          },
          "notificationItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "NotificationRequestItem": {
                  "$ref": "#/components/schemas/NotificationRequestItem"
                }
              }
            }
          }
        }
      },
      "CreateInteraction": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "aX7652csaaB32"
          },
          "title": {
            "type": "string",
            "example": "WhatsApp Message"
          },
          "subtitle": {
            "type": "string",
            "example": "Chance Infinie"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26+00:00"
          },
          "advisorId": {
            "type": "string",
            "example": "aX7652csaaB35"
          },
          "channel": {
            "$ref": "#/components/schemas/InteractionChannel"
          },
          "context": {
            "$ref": "#/components/schemas/InteractionContext"
          },
          "templateId": {
            "type": "string",
            "example": "0015DXdvssFhbY4"
          },
          "metadata": {
            "$ref": "#/components/schemas/InteractionMetadata"
          }
        },
        "required": [
          "clientId",
          "title",
          "datetime",
          "advisorId",
          "context"
        ]
      },
      "CreateInteractionV2": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "example": "aX7652csaaB32"
          },
          "title": {
            "type": "string",
            "example": "WhatsApp Message"
          },
          "subtitle": {
            "type": "string",
            "example": "Example of an outreach message that has been sent to the client"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "channel": {
            "$ref": "#/components/schemas/InteractionChannel"
          },
          "metadata": {
            "$ref": "#/components/schemas/InteractionV2CreationMetadata"
          }
        },
        "required": [
          "clientId",
          "datetime",
          "channel",
          "metadata"
        ]
      },
      "InteractionV2CreationMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/InteractionProductShareCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionPayByLinkCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionProductCuratorCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionConsultationCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionPostalCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionOutreachCreationMetadata"
          },
          {
            "$ref": "#/components/schemas/InteractionOutreachActionCreationMetadata"
          }
        ],
        "discriminator": {
          "propertyName": "context",
          "mapping": {
            "paymentLink": "#/components/schemas/InteractionPayByLinkCreationMetadata",
            "productShare": "#/components/schemas/InteractionProductShareCreationMetadata",
            "outreachTemplate": "#/components/schemas/InteractionOutreachCreationMetadata",
            "virtualConsultation": "#/components/schemas/InteractionConsultationCreationMetadata",
            "productCurator": "#/components/schemas/InteractionProductCuratorCreationMetadata",
            "postal": "#/components/schemas/InteractionPostalCreationMetadata",
            "outreachAction": "#/components/schemas/InteractionOutreachActionCreationMetadata"
          }
        }
      },
      "InteractionOutreachCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "outreachTemplate"
            ]
          },
          "templateId": {
            "type": "string"
          }
        },
        "required": [
          "context"
        ]
      },
      "InteractionProductShareCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "productShare"
            ]
          },
          "productId": {
            "type": "string",
            "description": "The ID of the product that was shared."
          }
        },
        "required": [
          "context",
          "productId"
        ]
      },
      "InteractionPayByLinkCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "paymentLink"
            ]
          },
          "paymentLinkId": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "paymentLinkId"
        ]
      },
      "InteractionPostalCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "postal"
            ]
          },
          "actionType": {
            "type": "string",
            "enum": [
              "visit",
              "booking",
              "preOrder",
              "alterationsTailoring",
              "afterSales",
              "gift",
              "instorePickup",
              "delivery"
            ]
          },
          "note": {
            "type": "string",
            "description": "A custom note left by the CA to explain this postal interaction",
            "example": "Sent them a bottle of champagne for their birthday"
          }
        },
        "required": [
          "context"
        ]
      },
      "InteractionConsultationCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "virtualConsultation"
            ]
          },
          "consultationType": {
            "type": "string",
            "enum": [
              "instore",
              "virtual"
            ]
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T14:30:00.000Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T15:30:00.000Z"
          },
          "storeCode": {
            "type": "string",
            "example": "W03"
          },
          "templateId": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "consultationType",
          "startTime",
          "endTime",
          "storeCode"
        ]
      },
      "InteractionOutreachActionCreationMetadata": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string",
            "enum": [
              "outreachAction"
            ]
          },
          "action": {
            "type": "string",
            "enum": [
              "visit",
              "alterationsTailoring",
              "preOrder",
              "booking",
              "gift",
              "afterSales",
              "instorePickup",
              "delivery"
            ]
          },
          "subject": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "action"
        ]
      },
      "Token": {
        "type": "string",
        "description": "Firebase device token",
        "example": "jNkq51OaxDg:APA91bFlxn5bV7tBnCmjw7sODw1Q6XJUhZtsku3iZRwHUVS3vKlev6y1fN-fKuR-0BYanFrpTKOGEZunCju2V5mmsAJTpuPngI0514VlhoP697q9f817wuEIXBUcnHQqtjfINwWSh4dH"
      },
      "User": {
        "properties": {
          "id": {
            "example": "a0789DCZsdTU",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "currencyCode": {
            "example": "EUR",
            "type": "string",
            "description": "A currency code in ISO-4217. 3 letters, uppercase.",
            "pattern": "^[A-Z]{3}$"
          },
          "email": {
            "example": "friend@example.com",
            "type": "string",
            "description": "The customer advisor's email"
          },
          "firstName": {
            "type": "string",
            "description": "The customer first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The customer last name",
            "example": "Doe"
          }
        },
        "required": [
          "id",
          "currencyCode",
          "email",
          "lastName"
        ],
        "type": "object"
      },
      "UserInfo": {
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/UserInfoContact"
          },
          "displayFields": {
            "items": {
              "$ref": "#/components/schemas/TypedValue"
            },
            "type": "array"
          },
          "store": {
            "$ref": "#/components/schemas/UserInfoStore"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "user",
          "store",
          "displayFields"
        ],
        "type": "object"
      },
      "UserInfoContact": {
        "properties": {
          "email": {
            "example": "contact@crm.com",
            "type": "string"
          },
          "information": {
            "example": "If the information is not accurate, or changed, please contact your CRM team",
            "type": "string"
          }
        },
        "required": [
          "information"
        ],
        "type": "object"
      },
      "UserInfoStore": {
        "properties": {
          "code": {
            "example": "1234",
            "type": "string"
          },
          "id": {
            "example": "a0789DCZsdzX",
            "type": "string"
          },
          "name": {
            "example": "Example Store",
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ],
        "type": "object"
      },
      "UserRole": {
        "properties": {
          "id": {
            "example": "a0789DCZsdCV",
            "type": "string"
          },
          "name": {
            "example": "Developer",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "RegisterToNotificationsBody": {
        "title": "RegisterToNotificationsBody",
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "GetNotificationsRegistrationsTokensResponse": {
        "title": "GetNotificationsRegistrationsTokensResponse",
        "description": "The response contains all of the Notification Token objects that are attached to the user who's making the request.\n* The tokens in the list might be expired.\n",
        "properties": {
          "tokens": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "token": {
                  "$ref": "#/components/schemas/Token"
                },
                "createdDate": {
                  "$ref": "#/components/schemas/ISO8601DateTimeString"
                },
                "lastUpdatedDate": {
                  "$ref": "#/components/schemas/ISO8601DateTimeString"
                }
              }
            }
          }
        }
      },
      "RecordUpdateOrCreationIssueEnum": {
        "type": "string",
        "enum": [
          "error",
          "warning"
        ]
      },
      "RecordUpdateOrCreationIssueBase": {
        "description": "Record update/creation bad request error",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RecordUpdateOrCreationIssueEnum"
          },
          "translationKey": {
            "type": "string",
            "description": "Translation key representing a validation error/warning message"
          }
        },
        "required": [
          "type",
          "translationKey"
        ]
      },
      "RecordUpdateOrCreationIssue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecordUpdateOrCreationIssueBase"
          },
          {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "Record field that is concerned by the error/warning"
              }
            }
          }
        ]
      },
      "RecordUpdateOrCreationInternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecordUpdateOrCreationIssueBase"
          }
        ]
      },
      "ProductDetailAttributes": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "list": {
            "$ref": "#/components/schemas/AttributesList"
          },
          "values": {
            "$ref": "#/components/schemas/AttributesValues"
          }
        },
        "required": [
          "list",
          "values"
        ]
      },
      "AttributeValues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AttributeValue"
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "color"
          },
          "translationKey": {
            "type": "string",
            "description": "The translation key used to display the translated attribute name.",
            "example": "product.attribute.color"
          },
          "shouldDisplayInStockView": {
            "type": "boolean",
            "description": "Defines whether the attribute should be displayed in the stock details view or not.",
            "example": false
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValueItem"
            }
          }
        },
        "required": [
          "name",
          "translationKey",
          "shouldDisplayInStockView",
          "items"
        ]
      },
      "AttributeValueItem": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AttributeValueItemHexColor"
          },
          {
            "$ref": "#/components/schemas/AttributeValueItemImageUrl"
          },
          {
            "$ref": "#/components/schemas/AttributeValueItemStringValue"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "hexCode": "#/components/schemas/AttributeValueItemHexColor",
            "imageUrl": "#/components/schemas/AttributeValueItemImageUrl",
            "string": "#/components/schemas/AttributeValueItemStringValue"
          }
        }
      },
      "AttributeValueItemHexColor": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hexCode"
            ]
          },
          "value": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name that needs to be used by the FE in the query parameter selection.",
            "example": "red"
          },
          "isSelected": {
            "type": "boolean",
            "description": "Defines whether the attribute has been selected or not",
            "example": false
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          }
        },
        "required": [
          "type",
          "value",
          "name",
          "isSelected",
          "availability"
        ]
      },
      "AttributeValueItemImageUrl": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "imageUrl"
            ]
          },
          "value": {
            "type": "string",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "The name that needs to be used by the FE in the query parameter selection.",
            "example": "red"
          },
          "isSelected": {
            "type": "boolean",
            "description": "Defines whether the attribute has been selected or not",
            "example": false
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          }
        },
        "required": [
          "type",
          "value",
          "name",
          "isSelected",
          "availability"
        ]
      },
      "AttributeValueItemStringValue": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type which will help the FE team to parse and display the value.",
            "enum": [
              "string"
            ]
          },
          "value": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The name that needs to be used by the FE in the query parameter selection.",
            "example": "red"
          },
          "isSelected": {
            "type": "boolean",
            "description": "Defines whether the attribute has been selected or not",
            "example": false
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          }
        },
        "required": [
          "type",
          "value",
          "name",
          "isSelected",
          "availability"
        ]
      },
      "ColorHexOrURL": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ColorAttributeHexCode"
          },
          {
            "$ref": "#/components/schemas/ColorAttributeImageUrl"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "hexCode": "#/components/schemas/ColorAttributeHexCode",
            "url": "#/components/schemas/ColorAttributeImageUrl"
          }
        }
      },
      "ColorAttribute": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ColorHexOrURL"
        }
      },
      "ColorAttributeImageUrl": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url"
            ]
          },
          "imageUrl": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "type",
          "imageUrl"
        ]
      },
      "ColorAttributeHexCode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hexCode"
            ]
          },
          "hexCode": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "hexCode"
        ]
      },
      "AttributesListItem": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "name"
        ]
      },
      "AttributesList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AttributesListItem"
        },
        "example": [
          {
            "displayName": "Color",
            "name": "color"
          },
          {
            "displayName": "Material",
            "name": "material"
          }
        ]
      },
      "AttributesValuesAdditional": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "display",
          "value"
        ]
      },
      "AttributesValues": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/AttributesValuesAdditional"
        },
        "example": {
          "color": {
            "display": "Blue",
            "value": "blue_code",
            "isSelected": false
          },
          "material": {
            "display": "Gold",
            "value": "gold_code",
            "isSelected": true
          }
        }
      },
      "AttributeMultipleValuesAdditional": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "description": "a string representation of the attribute for display purposes"
          },
          "attributeValueItem": {
            "$ref": "#/components/schemas/AttributeValueItem"
          }
        },
        "required": [
          "display",
          "value",
          "attributeValueItem"
        ]
      },
      "AttributeMultipleValues": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AttributeMultipleValuesAdditional"
          }
        },
        "example": {
          "color": [
            {
              "display": "Blue",
              "value": "blue_code"
            },
            {
              "display": "Green",
              "value": "green_code"
            }
          ],
          "material": [
            {
              "display": "Gold",
              "value": "gold_code"
            },
            {
              "display": "Silver",
              "value": "silver_code"
            }
          ]
        }
      },
      "Information": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "description"
          },
          "type": {
            "type": "string",
            "example": "image"
          },
          "value": {
            "type": "string",
            "example": "this product is ..."
          }
        },
        "required": [
          "name",
          "type",
          "value"
        ]
      },
      "ProductVideo": {
        "type": "object",
        "description": "An object that holds the product video",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the product video",
            "format": "uri",
            "example": "https://www.example.com/video.mp4"
          },
          "thumbnail": {
            "type": "string",
            "description": "A custom thumbnail to use for the product video",
            "format": "uri",
            "example": "https://www.example.com/thumbnail.jpeg"
          }
        },
        "required": [
          "url"
        ]
      },
      "ProductDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "product"
            ]
          },
          "id": {
            "type": "string",
            "example": "A12G564"
          },
          "masterId": {
            "type": "string",
            "example": "E9TGH67"
          },
          "name": {
            "type": "string",
            "example": "A product name"
          },
          "sku": {
            "type": "string",
            "example": "E9TGH67-123"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "http://example.com/image1.jpg"
            }
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "attributes": {
            "$ref": "#/components/schemas/ProductDetailAttributes"
          },
          "attributeValues": {
            "$ref": "#/components/schemas/AttributeValues"
          },
          "information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Information"
            }
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "hasSimilarProducts": {
            "type": "boolean",
            "description": "A boolean that indicates whether or not the current product has similar products.",
            "example": true
          },
          "video": {
            "$ref": "#/components/schemas/ProductVideo"
          },
          "limitedEdition": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "sku",
          "images",
          "category",
          "information"
        ]
      },
      "MasterDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "master"
            ]
          },
          "id": {
            "type": "string",
            "example": "E9TGH67"
          },
          "name": {
            "type": "string",
            "example": "A product name"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "http://example.com/image1.jpg"
            }
          },
          "priceRange": {
            "type": "object",
            "properties": {
              "min": {
                "$ref": "#/components/schemas/Price"
              },
              "max": {
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "min",
              "max"
            ]
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "attributes": {
            "$ref": "#/components/schemas/ProductDetailAttributes"
          },
          "attributeValues": {
            "$ref": "#/components/schemas/AttributeValues"
          },
          "information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Information"
            }
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "hasSimilarProducts": {
            "type": "boolean",
            "description": "A boolean that indicates whether or not the current product has similar products.",
            "example": true
          },
          "video": {
            "$ref": "#/components/schemas/ProductVideo"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "images",
          "category",
          "attributes",
          "information"
        ]
      },
      "SummaryTypes": {
        "type": "string",
        "enum": [
          "master",
          "product"
        ]
      },
      "ProductSummary": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SummaryTypes"
          },
          "id": {
            "type": "string",
            "example": "A12G564"
          },
          "masterId": {
            "type": "string",
            "example": "E9TGH67"
          },
          "name": {
            "type": "string",
            "example": "A product name"
          },
          "sku": {
            "type": "string",
            "example": "E9TGH67-123"
          },
          "image": {
            "type": "string",
            "example": "http://example.com/image1.jpg",
            "format": "uri"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string"
                },
                "displayValue": {
                  "type": "string"
                }
              },
              "required": [
                "displayName",
                "displayValue"
              ]
            }
          },
          "colorAttribute": {
            "$ref": "#/components/schemas/ColorAttribute"
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "shortDescription": {
            "type": "string",
            "example": "A short description about the product"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "sku",
          "image",
          "category"
        ]
      },
      "MasterSummary": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SummaryTypes"
          },
          "id": {
            "type": "string",
            "example": "E9TGH67"
          },
          "name": {
            "type": "string",
            "example": "A product name"
          },
          "image": {
            "type": "string",
            "example": "http://example.com/image1.jpg",
            "format": "uri"
          },
          "priceRange": {
            "type": "object",
            "properties": {
              "min": {
                "$ref": "#/components/schemas/Price"
              },
              "max": {
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "min",
              "max"
            ]
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string"
                },
                "displayValues": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "displayName",
                "displayValues"
              ]
            }
          },
          "colorAttribute": {
            "$ref": "#/components/schemas/ColorAttribute"
          },
          "availability": {
            "$ref": "#/components/schemas/ProductAvailabilityTag"
          },
          "shortDescription": {
            "type": "string",
            "example": "A short description about the product"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "image",
          "category",
          "attributes"
        ]
      },
      "ProductCategoryNextItemType": {
        "type": "string",
        "enum": [
          "category",
          "product"
        ],
        "example": "category"
      },
      "TextItem": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "next": {
            "$ref": "#/components/schemas/ProductCategoryNextItemType"
          }
        },
        "required": [
          "categoryId",
          "categoryName",
          "next"
        ]
      },
      "CardItem": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "next": {
            "$ref": "#/components/schemas/ProductCategoryNextItemType"
          },
          "image": {
            "type": "string",
            "example": "https://example.com/Women.jpg"
          },
          "size": {
            "type": "string",
            "enum": [
              "small",
              "medium",
              "large"
            ]
          }
        },
        "required": [
          "categoryId",
          "categoryName",
          "next",
          "image",
          "size"
        ]
      },
      "TextItems": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextItem"
            }
          }
        },
        "required": [
          "display",
          "list"
        ]
      },
      "CardItems": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "enum": [
              "card"
            ]
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardItem"
            }
          }
        },
        "required": [
          "display",
          "list"
        ]
      },
      "CategoriesReduceResult": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "example": "customizable"
          },
          "categoryName": {
            "type": "string",
            "example": "Customizable"
          },
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TextItems"
              },
              {
                "$ref": "#/components/schemas/CardItems"
              }
            ],
            "discriminator": {
              "propertyName": "display",
              "mapping": {
                "text": "#/components/schemas/TextItems",
                "card": "#/components/schemas/CardItems"
              }
            }
          }
        },
        "required": [
          "categoryId",
          "categoryName",
          "items"
        ]
      },
      "ProductStockDetailsShop": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "example": 2
          },
          "name": {
            "type": "string",
            "example": "Boutique des Champs-Élysées"
          },
          "address": {
            "type": "string",
            "example": "68 avenue des Champs-Élysées, Paris"
          }
        },
        "required": [
          "quantity",
          "name",
          "address"
        ]
      },
      "ProductStockDetails": {
        "type": "object",
        "properties": {
          "currentStore": {
            "$ref": "#/components/schemas/ProductStockDetailsCurrentStore"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStockDetailsRegions"
            }
          }
        },
        "required": [
          "currentStore"
        ]
      },
      "ProductStockDetailsCurrentStore": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Store"
          },
          "quantityLabel": {
            "type": "string",
            "example": "100+"
          },
          "isAvailable": {
            "type": "boolean",
            "example": false,
            "description": "Defines whether this stock item is available or not in the associated region.\nIn privacy-aware situations, a user might want to show a more generic version of\navailability instead of a concrete number of items. This value enables the\ndisplay of an in-stock/out-of-stock interface.\n"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "quantity": {
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "name",
          "quantityLabel",
          "isAvailable",
          "quantity"
        ]
      },
      "ProductStockDetailsRegions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Store"
          },
          "quantityLabel": {
            "type": "string",
            "example": "100+"
          },
          "isAvailable": {
            "type": "boolean",
            "example": false,
            "description": "Defines whether this stock item is available or not in the associated region.\nIn privacy-aware situations, a user might want to show a more generic version of\navailability instead of a concrete number of items. This value enables the\ndisplay of an in-stock/out-of-stock interface.\n"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-23T07:11:26.000+00:00Z"
          },
          "shops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductStockDetailsShop"
            }
          }
        },
        "required": [
          "name",
          "quantityLabel",
          "isAvailable",
          "shops"
        ]
      },
      "ProductStockResult": {
        "type": "object",
        "properties": {
          "stocks": {
            "$ref": "#/components/schemas/ProductStockDetails"
          }
        },
        "required": [
          "stocks"
        ]
      },
      "ProductFilterRequestConstraint": {
        "type": "object",
        "description": "A constraint placed on a filter. Constraints can either be \"in\" (an array) or \"equals\" (to a value).\n",
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "in",
              "eq"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "operator",
          "value"
        ]
      },
      "ProductFilterRequestQueryParameter": {
        "type": "object",
        "description": "A set of constraints placed on filters, keyed by the filter name, and containg an operator and an array of values.\n",
        "additionalProperties": {
          "$ref": "#/components/schemas/ProductFilterRequestConstraint"
        },
        "example": {
          "color": {
            "operator": "eq",
            "value": [
              "blue_code"
            ]
          },
          "material": {
            "operator": "in",
            "value": [
              "gold_code",
              "blue_code"
            ]
          }
        }
      },
      "ProductsDetailsResult": {
        "title": "ProductsDetailsResult",
        "description": "A response when requesting for an array of product ids.",
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProductDetails"
                },
                {
                  "$ref": "#/components/schemas/MasterDetails"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "product": "#/components/schemas/ProductDetails",
                  "master": "#/components/schemas/MasterDetails"
                }
              }
            }
          }
        },
        "required": [
          "products"
        ]
      },
      "ProductsSearchResult": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MasterSummary"
                },
                {
                  "$ref": "#/components/schemas/ProductSummary"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "master": "#/components/schemas/MasterSummary",
                  "product": "#/components/schemas/ProductSummary"
                }
              }
            }
          },
          "filters": {
            "$ref": "#/components/schemas/Filters"
          },
          "sort": {
            "$ref": "#/components/schemas/Sorts"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "products",
          "filters",
          "pagination"
        ]
      },
      "AttributesSearchResult": {
        "type": "object",
        "properties": {
          "masterId": {
            "type": "string",
            "example": "E9TGH67"
          },
          "productId": {
            "type": "string",
            "example": "E9TGH67-123"
          },
          "attributePossibleValues": {
            "$ref": "#/components/schemas/AttributeMultipleValues"
          }
        },
        "required": [
          "masterId",
          "attributePossibleValues"
        ]
      },
      "SelectedFilters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "color"
          },
          "operator": {
            "type": "string",
            "enum": [
              "eq",
              "in"
            ],
            "example": "eq"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedFilterItem"
            }
          }
        },
        "required": [
          "name",
          "operator",
          "value"
        ]
      },
      "AvailableFilters": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FilterText"
          },
          {
            "$ref": "#/components/schemas/FilterImage"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "text": "#/components/schemas/FilterText",
            "images": "#/components/schemas/FilterImage"
          }
        }
      },
      "Filters": {
        "type": "object",
        "properties": {
          "availableFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableFilters"
            }
          },
          "selectedFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectedFilters"
            }
          }
        },
        "required": [
          "availableFilters",
          "selectedFilters"
        ]
      },
      "SelectedFilterItem": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "White"
          },
          "value": {
            "type": "string",
            "example": "white"
          }
        },
        "required": [
          "displayName",
          "value"
        ]
      },
      "FilterItemDefault": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "White"
          },
          "value": {
            "type": "string",
            "example": "white"
          },
          "count": {
            "type": "integer",
            "example": 100
          }
        },
        "required": [
          "displayName",
          "value",
          "count"
        ]
      },
      "FilterText": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItemDefault"
            }
          },
          "isRequired": {
            "type": "boolean"
          },
          "isMultiSelect": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "name",
          "displayName",
          "value",
          "isRequired",
          "isMultiSelect"
        ]
      },
      "FilterImage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "images"
            ]
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItemImage"
            }
          },
          "isRequired": {
            "type": "boolean"
          },
          "isMultiSelect": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "name",
          "displayName",
          "value",
          "isRequired",
          "isMultiSelect"
        ]
      },
      "FilterItemImage": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "imageURL": {
            "type": "string",
            "format": "uri"
          },
          "count": {
            "type": "integer",
            "example": 100
          }
        },
        "required": [
          "displayName",
          "value",
          "imageURL",
          "count"
        ]
      },
      "Sorts": {
        "type": "object",
        "properties": {
          "availableSorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableSort"
            }
          },
          "selectedSortKey": {
            "type": "string"
          }
        },
        "required": [
          "availableSorts",
          "selectedSortKey"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "actualPageIndex": {
            "type": "integer"
          },
          "totalPageCount": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          }
        },
        "required": [
          "actualPageIndex",
          "totalPageCount",
          "pageSize",
          "totalCount"
        ]
      },
      "ClientHeaderJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientHeader"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientHeaderJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientHeaderJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientKPIJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientKPI"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientKPIJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientKPIJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientTimelineV1JSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientTimelineV1"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientTimelineV1JSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientTimelineV1JSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientTimelineActionsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientTimelineActions"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientTimelineActionsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientTimelineActionsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientListsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientLists"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientListsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientListsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "CreateClientListSuccessResponsePluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/DefaultSuccessResponse"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "CreateClientListSuccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CreateClientListSuccessResponsePluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientListJSendSuccessPluginResponseCommonQueryResultClientListWithPagination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientList"
          },
          {
            "$ref": "#/components/schemas/PaginationResponseProperties"
          }
        ]
      },
      "ClientListJSendSuccessPluginResponseCommonQueryResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonQueryResult"
          },
          {
            "properties": {
              "items": {
                "$ref": "#/components/schemas/ClientListJSendSuccessPluginResponseCommonQueryResultClientListWithPagination"
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "ClientListJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientListJSendSuccessPluginResponseCommonQueryResult"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientListJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientListJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/Clients"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientDetailsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientDetails"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientDetailsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientDetailsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "EmptyJSONJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/EmptyJSON"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "EmptyJSONJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/EmptyJSONJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientNotesJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientNotes"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientNotesJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientNotesJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientPreferencesJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientPreferences"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientPreferencesJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientPreferencesJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "IDashboardsV2JSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/IDashboardsV2"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "IDashboardsV2JSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/IDashboardsV2JSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "DashboardJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/IDashboards"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "DashboardJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/DashboardJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ClientOutreachJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/ClientOutreach"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "ClientOutreachJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ClientOutreachJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "InteractionsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/InteractionsV1"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "InteractionsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/InteractionsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "DefaultSuccessResponseJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/DefaultSuccessResponse"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "DefaultSuccessResponseJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/DefaultSuccessResponseJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "NewslettersJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/NewslettersV1"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "NewslettersJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/NewslettersJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "OutreachTemplatesJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/OutreachTemplates"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "OutreachTemplatesJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/OutreachTemplatesJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "TransactionsJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/Transactions"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "TransactionsJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/TransactionsJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "TransactionJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/Transaction"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "TransactionJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/TransactionJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "UserInfoJSendSuccessPluginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginResponse"
          },
          {
            "properties": {
              "result": {
                "$ref": "#/components/schemas/UserInfo"
              }
            },
            "required": [
              "result"
            ]
          }
        ]
      },
      "UserInfoJSendSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JSendSuccess"
          },
          {
            "properties": {
              "data": {
                "$ref": "#/components/schemas/UserInfoJSendSuccessPluginResponse"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Bad Request Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "JSendBadRequestError": {
        "description": "Bad Request Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JSendFail"
            }
          }
        }
      },
      "JSendNotFoundError": {
        "description": "Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JSendFail"
            }
          }
        }
      },
      "JSendInternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/JSendError"
            }
          }
        }
      },
      "GetOrderByIdResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "GetOrderByIdResponseV2": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionV2"
            }
          }
        }
      },
      "OrderCreationResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "OrderCreationResponse",
              "type": "object",
              "properties": {
                "orderId": {
                  "type": "string",
                  "description": "The ID of the order that was created.",
                  "example": "00000001"
                }
              },
              "required": [
                "orderId"
              ]
            }
          }
        }
      },
      "PaymentLinkCreationResponse": {
        "description": "Response used when the server will return a 201 Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentLink"
            }
          }
        }
      },
      "GetPaymentLinkResponse": {
        "description": "Response used when a server will return a 200 OK for retrieving a payment link",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentLink"
            }
          }
        }
      },
      "GetNotificationsRegistrationsTokens": {
        "description": "Successfully fetched tokens from the user's list of tokens.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetNotificationsRegistrationsTokensResponse"
            }
          }
        }
      },
      "NoContentResponse": {
        "description": "Successful request with no content"
      }
    },
    "parameters": {
      "AppointmentIdPathParam": {
        "name": "appointmentId",
        "description": "Appointment id.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AppointmentFilterTerritoryOwnerId": {
        "name": "territoryOwnerId",
        "description": "The territory owner ID of the territory at which the appointment will take place. If the appointment is virtual, the territory ID will be the same territory in which the advisor is working at.",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "AppointmentFilterTerritoryId": {
        "name": "territoryId",
        "description": "The territory ID at which the appointment will take place. If the appointment is virtual, the territory ID will be the same territory in which the advisor is working at.",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "AppointmentFilterStartDate": {
        "name": "startDate",
        "description": "The date representation of the appointment's starting time.",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "AppointmentFilterEndDate": {
        "name": "endDate",
        "description": "The date representation of the appointment's ending time.",
        "in": "query",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "AppointmentFilterType": {
        "name": "type",
        "description": "The type of the appointment.",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "AcceptLanguage": {
        "name": "Accept-Language",
        "in": "header",
        "description": "The returned content's expected language. \nThe format is defined by RFC-4646: https://tools.ietf.org/html/rfc4646\nIf the server is unable to honour this language it will return the content in the default language.\n",
        "required": false,
        "schema": {
          "type": "string",
          "default": "en"
        },
        "examples": {
          "simpleExample": {
            "value": "en"
          },
          "fullExample": {
            "value": "zh-hant"
          },
          "countryExample": {
            "value": "fr-CA"
          }
        }
      },
      "PageIndexQueryParam": {
        "name": "pageIndex",
        "description": "The index of the page to query. Counting starts from 0",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "PageSizeQueryParam": {
        "name": "pageSize",
        "description": "The amount of result to receive in one query. Minimum - 200",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 200,
          "default": 200
        }
      },
      "CursorQueryParam": {
        "name": "cursor",
        "description": "A cursor to keep track of pagination data in case changes were made after fetching results.",
        "in": "query",
        "required": false,
        "example": "01g5E00001Ned2tQAB",
        "schema": {
          "type": "string"
        }
      },
      "SortQueryParam": {
        "name": "sort",
        "description": "Clientlist members sorting preferences. The following example will be translated to `sort[key]=name&sort[order]=asc`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/SortKeyValue"
        }
      },
      "ConnectLinkExternalIdPathParam": {
        "name": "externalId",
        "description": "Id for which the link has been created.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ConnectLinkExternalIdsPathParam": {
        "name": "externalIds",
        "description": "Ids for which the links were created.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "StoreId": {
        "name": "shopId",
        "in": "query",
        "description": "The ID of the shop from which the call is made. This ID is used to retrieve stock availability for this given shop. If no shop ID will be given, the response won't include availability & pricing details.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "015"
        }
      },
      "filtersQueryParam": {
        "name": "filters",
        "description": "Filtering preferences. The following example will be translated to `filters[key]=value,value2...`\n\n```\n{\n  \"key\": [\"value1\", \"value2\", ...]\n}\n```\n",
        "required": false,
        "in": "query",
        "style": "deepObject",
        "explode": true,
        "schema": {
          "type": "object"
        }
      },
      "EventId": {
        "name": "eventId",
        "description": "Event ID to retrieve",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "NotificationId": {
        "name": "notificationId",
        "description": "Notification ID to work on",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "NpsId": {
        "name": "npsId",
        "description": "NPS ID to retrieve",
        "required": true,
        "in": "path",
        "schema": {
          "type": "string"
        }
      },
      "OutreachChannelsQueryParam": {
        "name": "channels",
        "description": "The types of channels you'd like to receive",
        "required": false,
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/OutreachChannels"
          }
        }
      },
      "PageSizeQueryParam1": {
        "name": "pageSize",
        "description": "The amount of result to receive in one query.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "CreateAppointmentBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateAppointmentBody"
            }
          }
        },
        "required": true
      },
      "AssignAppointmentBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AssignAppointmentBody"
            }
          }
        },
        "required": true
      },
      "EditAppointmentBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EditAppointmentBody"
            }
          }
        },
        "required": true
      },
      "CreateConnectLinkBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateConnectLinkBody"
            }
          }
        },
        "required": true
      },
      "UpdateConnectLinkBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateConnectLinkBody"
            }
          }
        },
        "required": true
      },
      "CreateOrUpdateCurationBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateOrUpdateCurationBody"
            }
          }
        },
        "required": true
      },
      "PatchCurationBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PatchCurationBody"
            }
          }
        },
        "required": true
      },
      "UploadAssetBody": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/UploadAssetBody"
            }
          }
        },
        "required": true
      },
      "AddProductsBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddProductsBody"
            }
          }
        },
        "required": true
      },
      "CreateNotificationBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateNotificationBody"
            }
          }
        },
        "required": true
      },
      "PatchNotificationBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PatchNotificationBody"
            }
          }
        },
        "required": true
      },
      "PatchSubscriptionBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PatchSubscriptionBody"
            }
          }
        },
        "required": true
      },
      "OrderCreationBody": {
        "description": "Order creation body",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrderCreationBody"
            }
          }
        }
      },
      "PaymentCreationBody": {
        "description": "Order creation body",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentCreationBody"
            }
          }
        }
      },
      "PaymentNotificationWebhookBody": {
        "description": "**(ADYEN v67)** The webhook's body structure. This is being designed by the payment service provider.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentNotificationWebhookBody"
            }
          }
        }
      },
      "RegisterToNotificationsBody": {
        "description": "The body of a request that contains a firebase device token, in JSON format.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegisterToNotificationsBody"
            }
          }
        }
      }
    }
  },
  "x-wso2-request-interceptor": "getSalesforceCredentials"
}
